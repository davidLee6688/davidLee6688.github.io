<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript教程</title>
      <link href="/2020/05/16/2020-2020-05-16-Typescript%E6%95%99%E7%A8%8B/"/>
      <url>/2020/05/16/2020-2020-05-16-Typescript%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一-TypeScript的存在价值？"><a href="#一-TypeScript的存在价值？" class="headerlink" title="一.  TypeScript的存在价值？"></a>一.  TypeScript的存在价值？</h1><ol><li>为<strong>JavaScript</strong>提供类型系统，弥补其弱类型导致的问题</li><li><strong>TypeScript</strong>为<strong>JavaScript</strong>的超级，兼容所有<strong>JavaScript</strong>目前及未来所有的特性</li><li>编辑器基于类型系统可以给予开发者更多的智能提示</li><li>类型系统有利于提高代码的质量和可维护性,有利于代码重构</li><li>在编译期间捕获错误，避免很多以往在运行期才能发现的错误</li><li>可以在代码层面提供良好的文档</li><li>用<strong>TypeScript</strong>书写的代码最终会被编译成JavaScript代码</li><li>与<strong>Flow</strong>等类型检查系统相比，<strong>TypeScript</strong>的优势在于<strong>JavaScript</strong>即<strong>TypeScript</strong></li></ol><blockquote><p>TypeScript只是带有文档的JavaScript, TypeScript让JavaScript更美好, 学习JavaScript仍然是必要的</p></blockquote><h1 id="二-TypeScript支持的ES6语法"><a href="#二-TypeScript支持的ES6语法" class="headerlink" title="二.  TypeScript支持的ES6语法"></a>二.  TypeScript支持的ES6语法</h1><ol><li><strong>class</strong></li><li><strong>箭头函数</strong></li><li><strong>rest</strong>参数</li><li><strong>let</strong></li><li><strong>const</strong></li><li><strong>解构赋值</strong></li><li><strong>扩展运算符</strong></li><li><strong>for…of</strong></li><li>迭代<strong>iterator</strong></li><li>模板字符串<strong>``</strong></li><li><strong>Promise</strong></li><li><strong>generators</strong></li><li><strong>async/await</strong></li></ol><h1 id="三-TypeScript项目构成"><a href="#三-TypeScript项目构成" class="headerlink" title="三.  TypeScript项目构成"></a>三.  TypeScript项目构成</h1><h2 id="3-1-编译上下文"><a href="#3-1-编译上下文" class="headerlink" title="3.1 编译上下文"></a>3.1 编译上下文</h2><ul><li>通过tsc –init可以生成默认的配置文件</li><li>使用<strong>tsconfig.json</strong>里通过compilerOptions来指定<strong>TypeScript</strong>的编译选项</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="comment">/* Basic Options */</span></span><br><span class="line">    <span class="comment">// "incremental": true,                   /* Enable incremental compilation */</span></span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,                          <span class="comment">/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */</span></span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,                     <span class="comment">/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */</span></span><br><span class="line">    <span class="comment">// "lib": [],                             /* Specify library files to be included in the compilation. */</span></span><br><span class="line">    <span class="comment">// "allowJs": true,                       /* Allow javascript files to be compiled. */</span></span><br><span class="line">    <span class="comment">// "checkJs": true,                       /* Report errors in .js files. */</span></span><br><span class="line">    <span class="comment">// "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */</span></span><br><span class="line">    <span class="comment">// "declaration": true,                   /* Generates corresponding '.d.ts' file. */</span></span><br><span class="line">    <span class="comment">// "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */</span></span><br><span class="line">    <span class="comment">// "sourceMap": true,                     /* Generates corresponding '.map' file. */</span></span><br><span class="line">    <span class="comment">// "outFile": "./",                       /* Concatenate and emit output to single file. */</span></span><br><span class="line">    <span class="comment">// "outDir": "./",                        /* Redirect output structure to the directory. */</span></span><br><span class="line">    <span class="comment">// "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span></span><br><span class="line">    <span class="comment">// "composite": true,                     /* Enable project compilation */</span></span><br><span class="line">    <span class="comment">// "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */</span></span><br><span class="line">    <span class="comment">// "removeComments": true,                /* Do not emit comments to output. */</span></span><br><span class="line">    <span class="comment">// "noEmit": true,                        /* Do not emit outputs. */</span></span><br><span class="line">    <span class="comment">// "importHelpers": true,                 /* Import emit helpers from 'tslib'. */</span></span><br><span class="line">    <span class="comment">// "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */</span></span><br><span class="line">    <span class="comment">// "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strict Type-Checking Options */</span></span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,                           <span class="comment">/* Enable all strict type-checking options. */</span></span><br><span class="line">    <span class="comment">// "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */</span></span><br><span class="line">    <span class="comment">// "strictNullChecks": true,              /* Enable strict null checks. */</span></span><br><span class="line">    <span class="comment">// "strictFunctionTypes": true,           /* Enable strict checking of function types. */</span></span><br><span class="line">    <span class="comment">// "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */</span></span><br><span class="line">    <span class="comment">// "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */</span></span><br><span class="line">    <span class="comment">// "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */</span></span><br><span class="line">    <span class="comment">// "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Additional Checks */</span></span><br><span class="line">    <span class="comment">// "noUnusedLocals": true,                /* Report errors on unused locals. */</span></span><br><span class="line">    <span class="comment">// "noUnusedParameters": true,            /* Report errors on unused parameters. */</span></span><br><span class="line">    <span class="comment">// "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */</span></span><br><span class="line">    <span class="comment">// "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Module Resolution Options */</span></span><br><span class="line">    <span class="comment">// "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */</span></span><br><span class="line">    <span class="comment">// "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */</span></span><br><span class="line">    <span class="comment">// "paths": &#123;&#125;,                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */</span></span><br><span class="line">    <span class="comment">// "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */</span></span><br><span class="line">    <span class="comment">// "typeRoots": [],                       /* List of folders to include type definitions from. */</span></span><br><span class="line">    <span class="comment">// "types": [],                           /* Type declaration files to be included in compilation. */</span></span><br><span class="line">    <span class="comment">// "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span></span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,                  <span class="comment">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span></span><br><span class="line">    <span class="comment">// "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */</span></span><br><span class="line">    <span class="comment">// "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="comment">// "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */</span></span><br><span class="line">    <span class="comment">// "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */</span></span><br><span class="line">    <span class="comment">// "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */</span></span><br><span class="line">    <span class="comment">// "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Experimental Options */</span></span><br><span class="line">    <span class="comment">// "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */</span></span><br><span class="line">    <span class="comment">// "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Advanced Options */</span></span><br><span class="line">    <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span>  <span class="comment">/* Disallow inconsistently-cased references to the same file. */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-声明空间"><a href="#3-2-声明空间" class="headerlink" title="3.2 声明空间"></a>3.2 声明空间</h2><h3 id="3-2-1-类型声明空间"><a href="#3-2-1-类型声明空间" class="headerlink" title="3.2.1 类型声明空间"></a>3.2.1 类型声明空间</h3><p>![image-20200414095213396](/Users/liwei/Library/Application Support/typora-user-images/image-20200414095213396.png)<br>我们不能把<strong>interface</strong>类型声明用作变量使用</p><h3 id="3-2-2-变量声明空间"><a href="#3-2-2-变量声明空间" class="headerlink" title="3.2.2 变量声明空间"></a>3.2.2 变量声明空间</h3><p>变量声明空间包含可以用作变量的内容，class Foo提供了一个类型Foo到类型声明空间，此外还提供了一个变量到Foo到变量声明空间，因此下列语句可以正常通过TypeScript类型检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = Foo</span><br></pre></td></tr></table></figure><h2 id="3-3-模块"><a href="#3-3-模块" class="headerlink" title="3.3 模块"></a>3.3 模块</h2><h3 id="3-3-1-全局模块"><a href="#3-3-1-全局模块" class="headerlink" title="3.3.1 全局模块"></a>3.3.1 全局模块</h3><p>默认情况下的ts代码在全局命名空间中<br>![image-20200414100101482](/Users/liwei/Library/Application Support/typora-user-images/image-20200414100101482.png)</p><p>这样的做法是危险的</p><h3 id="3-3-2-文件模块"><a href="#3-3-2-文件模块" class="headerlink" title="3.3.2 文件模块"></a>3.3.2 文件模块</h3><p>如果再ts文件的根级别位置有import或者export则这个文件会创建一个本地作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3-4-命名空间"><a href="#3-4-命名空间" class="headerlink" title="3.4 命名空间"></a>3.4 命名空间</h2><p>防止变量泄露到全局， TypeScript提供了namespace关键字来描述这种分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> namespace Utils &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Utils.log(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><p>namespace也是支持嵌套的</p><h1 id="四-类型系统"><a href="#四-类型系统" class="headerlink" title="四. 类型系统"></a>四. 类型系统</h1><h2 id="4-1-基本概念"><a href="#4-1-基本概念" class="headerlink" title="4.1 基本概念"></a>4.1 基本概念</h2><ol><li><p>基本注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">arg: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码使用了变量注解，函数参数注解和函数返回值注解</p></li><li><p>基本类型注解<br>JavaScript的基本数据类型适用于TypeScript的类型系统</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str: <span class="built_in">string</span> = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">const</span> boo: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> num: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> ss: Symbol = Symbol(<span class="string">'123'</span>)</span><br><span class="line"><span class="keyword">const</span> nn: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> nn1: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>数组注解<br>![image-20200414103730629](/Users/liwei/Library/Application Support/typora-user-images/image-20200414103730629.png)</p></li><li><p>接口注解<br>接口说明一种数据结构，是TypeScript的一个核心</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> People &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">    hobby?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p: People = &#123;</span><br><span class="line">    name: <span class="string">'david'</span>,</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>内联类型注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p: &#123;</span><br><span class="line">    name: <span class="string">'david'</span>,</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = &#123;</span><br><span class="line">    name: <span class="string">'david'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20200414104148235](/Users/liwei/Library/Application Support/typora-user-images/image-20200414104148235.png)</p></li><li><p>特殊类型注解(<strong>any</strong>, <strong>null</strong>, <strong>undefined</strong>, <strong>void</strong>)</p><ul><li><p><strong>any</strong><br>能够接收<strong>所有的类型</strong>（包括any类型），因此所有类型的数据都可以赋值给any类型的变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa: <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line">aa = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">aa = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">aa =  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当使用any的使用意味着告诉编辑器不要做<strong>任何</strong>类型检查，要尽量减少any的使用w</p></li><li><p><strong>null</strong>和<strong>undefined</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="literal">null</span></span><br><span class="line">num = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p><strong>void</strong> </p><p>用来表示一个函数没有返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello()</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li><p>泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse =  &lt;T&gt; (items: T[]): T[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> reverse = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = items.length - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">    reverse.push(items[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">number</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> reverseArr = reverse(<span class="built_in">number</span>)</span><br><span class="line"><span class="built_in">console</span>.log(reverseArr)</span><br></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>联合类型注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> format = (word: <span class="built_in">string</span>[] | <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> line = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> word === <span class="string">"string"</span>) &#123;</span><br><span class="line">    line = word;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    line = word.join(<span class="string">""</span>).trim();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> line;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(format([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]));</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>​    交叉类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extend = &lt;T, U&gt;(first: T, second: U): T &amp; <span class="function"><span class="params">U</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">    (&lt;T&gt;result)[id] = first[id];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> id <span class="keyword">in</span> second) &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">      (&lt;U&gt;result)[id] = second[id];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = extend(&#123; a: <span class="string">"hello"</span> &#125;, &#123; b: <span class="string">"world"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>元组类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">0</span>, <span class="string">''</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure></li></ol><ol start="11"><li><p>类型别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> strOrNum = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Text = <span class="built_in">string</span> | &#123; text: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Coordinates = [<span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Callback = <span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-迁移JavaScript代码至TypeScript"><a href="#4-2-迁移JavaScript代码至TypeScript" class="headerlink" title="4.2. 迁移JavaScript代码至TypeScript"></a>4.2. 迁移JavaScript代码至TypeScript</h2><p>一般来说，将JavaScript代码迁移至TypeScript包括以下步骤:</p><ul><li><p>添加一个tsconfig.json文件。</p></li><li><p>把文件扩展名从.js改成.ts，开始使用any来减少错误。</p></li><li><p>开始在TypeScript中写代码，尽可能减少any的使用。</p></li><li><p>回到旧代码，开始添加类型注解，并修复已识别的错误。</p></li><li><p>为第三方JavaScript代码定义环境声明。(很多三方库的类型声明已经发布到了<a href="http://definitelytyped.org/" target="_blank" rel="noopener">DefinitelyTyped</a>中)</p></li><li><p>在TypeScript中可以允许导入任何文件，例如.css文件, 使用webpack的话只需要在globals.d.ts中添加如下代码 即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.css'</span><br></pre></td></tr></table></figure></li></ul><p>  如果想使用HTML模板，如在Angular， 可以这样做</p>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.html'</span><br></pre></td></tr></table></figure><h2 id="4-3-types"><a href="#4-3-types" class="headerlink" title="4.3. @types"></a>4.3. @types</h2><p>毫无疑问，类型是TypeScript最大的优势之一，社区已经记录了将近90%的顶级JavaScript项目。这意味着，我们可以以交互式和探索性的方式来使用这些项目</p><h3 id="4-3-1-使用-types"><a href="#4-3-1-使用-types" class="headerlink" title="4.3.1  使用@types"></a>4.3.1  使用@types</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @types/jquery --save-dev</span><br></pre></td></tr></table></figure><p>@types支持全局和模块类型定义</p><h3 id="4-3-2-全局-types"><a href="#4-3-2-全局-types" class="headerlink" title="4.3.2  全局@types"></a>4.3.2  全局@types</h3><p>在默认情况下，TypeScript会自动包含支持全局使用的任何定义。例如，对于jQuery，你应该能够在项目中全局使用$。</p><h3 id="4-3-3-模块-types"><a href="#4-3-3-模块-types" class="headerlink" title="4.3.3 模块@types"></a>4.3.3 模块@types</h3><p>对于jQuery来说，通常建议使用模块。安装模块@types之后，不需要进行特别的配置，你就可以像使用模块一样使用它了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="comment">// 现在可以在次模块中任意使用$了</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-控制全局类型泄露"><a href="#4-3-4-控制全局类型泄露" class="headerlink" title="4.3.4 控制全局类型泄露"></a>4.3.4 控制全局类型泄露</h3><p>可以在tsconfig.json的compilerOptions.types选项，引入有意义的类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"types"</span>: [</span><br><span class="line">      <span class="string">"jquery"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上例所示，在配置compilerOptions.types：[“jquery”]之后，只允许使用jQuery的@types包。即使安装了另一个声明文件，如npm install@types/node，它的全局变量（如process）也不会泄漏到你的代码中，直到你将它们添加到tsconfig.json类型选项中。</p><h2 id="4-4-环境声明文件"><a href="#4-4-环境声明文件" class="headerlink" title="4.4. 环境声明文件"></a>4.4. 环境声明文件</h2><p>你可以选择把这些声明放入<strong>.ts</strong>或<strong>.d.ts</strong>里。在实际的项目中，强烈建议把声明放入独立的.d.ts里，你可以从一个命名为<strong>globals.d.ts</strong>或<strong>vendor.d.ts</strong>的文件开始。</p><p>如果一个文件有扩展名<strong>.d.ts</strong>，这意味着每个根级别的声明都必须以declare关键字作为前缀。这可以让开发者清楚地知道，在这里，TypeScript不会把它编译成任何代码，同时，开发者需要确保所声明的内容在编译时存在。</p><p><a href="https://www.w3cschool.cn/typescript/typescript-df-introduction.html" target="_blank" rel="noopener">声明文件编写参考</a></p><h2 id="4-5-接口"><a href="#4-5-接口" class="headerlink" title="4.5 接口"></a>4.5 接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// declare const myPoint: &#123; x: number; y: number &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> myPoint: Point</span><br></pre></td></tr></table></figure><p>使用内联方式的类型定义和使用接口的方式定义是等效的，但是使用接口的方式便于其他使用者对其进行扩展</p><p>如在a.d.ts中有以下代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在b.d.ts中有如下代码对接口Point进行了扩展</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-1-类可以实现接口"><a href="#4-5-1-类可以实现接口" class="headerlink" title="4.5.1 类可以实现接口"></a>4.5.1 类可以实现接口</h3><p>如果你希望在类中使用必须要被遵循的接口（类）或别人定义的对象结构，可以使用implements关键字来确保其兼容性</p><p>基本上，在implements存在的情况下，外部Point接口的任何更改都将导致代码库中的编译错误，因此可以轻松地使其保持同步</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyPoint <span class="keyword">implements</span> Point &#123;</span><br><span class="line">    x!: <span class="built_in">number</span>;</span><br><span class="line">    y!: <span class="built_in">number</span>;</span><br><span class="line">    z!: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口Point的结构发生了变化，自然MyPoint也需要相应作出改变，否则就会报错</p><h2 id="4-6-枚举"><a href="#4-6-枚举" class="headerlink" title="4.6 枚举"></a>4.6 枚举</h2><h3 id="4-6-1-数字枚举"><a href="#4-6-1-数字枚举" class="headerlink" title="4.6.1 数字枚举"></a>4.6.1 数字枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">    RED = <span class="number">100</span>,</span><br><span class="line">    GREEN = <span class="number">200</span>,</span><br><span class="line">    YELLOW = <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Color.RED)</span><br><span class="line"><span class="built_in">console</span>.log(Color[<span class="number">100</span>])</span><br></pre></td></tr></table></figure><p>上面代码console.log的结果是因为上面的ts代码被编译后生成的js代码是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Color;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Color</span>) </span>&#123;</span><br><span class="line">    Color[Color[<span class="string">"RED"</span>] = <span class="number">100</span>] = <span class="string">"RED"</span>;</span><br><span class="line">    Color[Color[<span class="string">"GREEN"</span>] = <span class="number">200</span>] = <span class="string">"GREEN"</span>;</span><br><span class="line">    Color[Color[<span class="string">"YELLOW"</span>] = <span class="number">300</span>] = <span class="string">"YELLOW"</span>;</span><br><span class="line">&#125;)(Color || (Color = &#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(Color.RED);</span><br><span class="line"><span class="built_in">console</span>.log(Color[<span class="number">100</span>]);</span><br></pre></td></tr></table></figure><p><code>Color[Color[&quot;RED&quot;] = 100] = &quot;RED&quot;;</code><br>这句代码会执行下述过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Color[<span class="string">"RED"</span>] = <span class="number">100</span> 并返回 <span class="number">100</span> (在JavaScript中，赋值运算符返回的值是被赋予的值)</span><br><span class="line">Color[<span class="number">100</span>] = <span class="string">"RED"</span></span><br></pre></td></tr></table></figure><p>用数字枚举做标记的一个实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AnimalFlags &#123;</span><br><span class="line">  None = <span class="number">0</span>,</span><br><span class="line">  HasClaws = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,<span class="comment">// 0000 0000</span></span><br><span class="line">  CanFly = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,    <span class="comment">// 0000 0010</span></span><br><span class="line">  EatsFish = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 0000 0100</span></span><br><span class="line">  FlyingClawedFishEating = HasClaws | CanFly | EatsFish  <span class="comment">// 0000 0001 || 0000 0010 || 0000 0100 0000 0111 -&gt; 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  flags: AnimalFlags;</span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> printAnimalAbilities = (animal: Animal): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> animalFlags = animal.flags;</span><br><span class="line">  <span class="keyword">if</span> (animalFlags &amp;&amp; animalFlags === AnimalFlags.HasClaws) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"有爪子的动物 "</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animalFlags &amp;&amp; animalFlags === AnimalFlags.CanFly) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"会飞的动物"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animalFlags &amp;&amp; animalFlags === AnimalFlags.EatsFish) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃鱼的动物"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    animalFlags &amp;&amp;</span><br><span class="line">    animalFlags === AnimalFlags.FlyingClawedFishEating</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"万能的动物"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (animalFlags == AnimalFlags.None) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"什么也不会的动物"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal: Animal = &#123; flags: AnimalFlags.None &#125;;   <span class="comment">// 0000 0000</span></span><br><span class="line">animal.flags |= AnimalFlags.HasClaws    <span class="comment">//  0000 0000  || 0000 0001</span></span><br><span class="line">animal.flags &amp;= ~AnimalFlags.HasClaws   <span class="comment">// 0000 0001 &amp; 1111 1110  0000 0000</span></span><br><span class="line">animal.flags |= AnimalFlags.FlyingClawedFishEating      <span class="comment">// 0000 0000 || 0000 0111      </span></span><br><span class="line">printAnimalAbilities(animal);</span><br></pre></td></tr></table></figure><h3 id="4-6-2-字符串枚举"><a href="#4-6-2-字符串枚举" class="headerlink" title="4.6.2 字符串枚举"></a>4.6.2 字符串枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MessageType &#123;</span><br><span class="line">    SUCCESS = <span class="string">'success'</span>,</span><br><span class="line">    ERROR = <span class="string">'error'</span>,</span><br><span class="line">    WARN = <span class="string">'warning'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MessageType.SUCCESS)</span><br></pre></td></tr></table></figure><h3 id="4-6-3-常量枚举"><a href="#4-6-3-常量枚举" class="headerlink" title="4.6.3 常量枚举"></a>4.6.3 常量枚举</h3><p>有时定义枚举可能只是为了让程序可读性更好，而不需要编译后的代码，即不需要编译成对象。typescript中考虑到这种情况，所以加入了 const enum</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> Tristate &#123;</span><br><span class="line">    False,</span><br><span class="line">    True,</span><br><span class="line">    Unknown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lie = Tristate.False;</span><br></pre></td></tr></table></figure><p>最终编译的js代码如下，并不会为枚举Tristate生成对应的Js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> lie = <span class="number">0</span> <span class="comment">/* False */</span>;</span><br><span class="line"><span class="comment">//# sourceMappingURL=ConstEnum.js.map</span></span><br></pre></td></tr></table></figure><p>如果需要让常量枚举也能编译到最终生成的JS代码中，可以使用<strong>preserveConstEnums</strong>编译选项</p><h3 id="4-6-4-有静态方法的常量枚举"><a href="#4-6-4-有静态方法的常量枚举" class="headerlink" title="4.6.4 有静态方法的常量枚举"></a>4.6.4 有静态方法的常量枚举</h3><p>可以使用enum+namespace的声明方式向枚举类型添加静态方法。如下面的例子所示，我们将静态成员isBusinessDay添加到枚举上。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday &#123;</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday,</span><br><span class="line">    Sunday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Weekday &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isBusinessDay</span>(<span class="params">day: Weekday</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> Weekday.Saturday:</span><br><span class="line">            <span class="keyword">case</span> Weekday.Sunday:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mon = Weekday.Monday;</span><br><span class="line"><span class="keyword">const</span> sun = Weekday.Sunday;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Weekday.isBusinessDay(mon))</span><br><span class="line"><span class="built_in">console</span>.log(Weekday.isBusinessDay(sun))</span><br></pre></td></tr></table></figure><h2 id="4-7-lib-d-ts"><a href="#4-7-lib-d-ts" class="headerlink" title="4.7 lib.d.ts"></a>4.7 lib.d.ts</h2><p>当你安装TypeScript时，会顺带安装一个lib.d.ts声明文件。这个文件包含JavaScript运行时及DOM（Document Object Model，文档对象模型）中存在的各种常见的JavaScript环境声明。</p><p>你可以通过指定<strong>–noLib</strong>的编译器命令行标记，或者在<strong>tsconfig.json</strong>中指定选项<strong>noLib：true</strong>，从上下文中排除此文件。</p><p><strong>lib.d.ts</strong>的内容主要是一些变量声明，如<strong>window</strong>、<strong>document</strong>、<strong>math</strong>等，以及一些类似的接口声明，如<strong>Window</strong>、<strong>Document</strong>、<strong>Math</strong>。阅读全局内容的文档和类型注解的最简单的方法是输入你知道有效的代码，如<strong>Math.floor</strong>，然后在IDE上按F12键，跳转到定义上。</p><h3 id="4-7-1-–lib选项"><a href="#4-7-1-–lib选项" class="headerlink" title="4.7.1 –lib选项"></a>4.7.1 –lib选项</h3><p>有时，你想要解耦编译目标（即生成的JavaScript版本）和环境库支持之间的关系。例如，对于Promise，你的编译目标是–target es5，但是你仍然想使用Promise，这时，你可以使用–lib选项来显示地控制lib。</p><p>注意：使用–lib选项可以将任何lib与–target解耦。</p><p>命令行</p><p><code>tsc --target es5  --lib dom,es6</code></p><p>tsconfig.json:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">  <span class="string">"lib"</span>: [<span class="string">"dom"</span>, <span class="string">"es6"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-2-lib的分类"><a href="#4-7-2-lib的分类" class="headerlink" title="4.7.2 lib的分类"></a>4.7.2 lib的分类</h3><p>● JavaScript功能</p><ol><li><p>es5</p></li><li><p>es6</p></li><li><p>es2015</p></li><li><p>es7</p></li><li><p>es2016</p></li><li><p>es2017</p></li><li><p>esnext</p></li></ol><ul><li><p>运行环境</p><ol><li>dom</li><li>dom.iterable</li><li>webworker</li><li>scripthost</li></ol></li><li><p>ESNext功能选项</p><ol><li>es2015.core</li><li>es2015.collection</li><li>es2015.generator</li><li>es2015.iterable</li><li>es2015.promise</li><li>es2015.proxy</li><li>es2015.reflect</li><li>es2015.symbol</li><li>es2015.symbol.wellknown</li><li>es2016.array.include</li><li>es2017.object</li><li>es2017.sharedmemory</li><li>esnext.asynciterable</li></ol></li></ul><p>–lib选项提供了非常高效的控制，因此你最有可能从运行环境与JavaScript功能类别中分别选择一项。如果没有指定–lib，则会导入默认库。</p><ul><li>当–target选项为es5时，会导入es5、dom、scripthost。</li><li>当–target选项为es6时，会导入es6、dom、dom.iterable、scripthost</li></ul><h2 id="4-8-函数"><a href="#4-8-函数" class="headerlink" title="4.8 函数"></a>4.8 函数</h2><p>函数类型在TypeScript类型系统中扮演着非常重要的角色，它们是可组合系统的核心构建块。</p><h3 id="4-8-1-参数注解"><a href="#4-8-1-参数注解" class="headerlink" title="4.8.1 参数注解"></a>4.8.1 参数注解</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg: <span class="built_in">string</span>| <span class="built_in">string</span>[] | <span class="literal">undefined</span> | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-2-函数返回值注解"><a href="#4-8-2-函数返回值注解" class="headerlink" title="4.8.2 函数返回值注解"></a>4.8.2 函数返回值注解</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg: <span class="built_in">string</span>| <span class="built_in">string</span>[] | <span class="literal">undefined</span> | <span class="literal">null</span></span>): <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        data: [],</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'success'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">    data: <span class="built_in">any</span>,</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-3-可选参数-参数默认值"><a href="#4-8-3-可选参数-参数默认值" class="headerlink" title="4.8.3 可选参数, 参数默认值"></a>4.8.3 可选参数, 参数默认值</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg: <span class="built_in">string</span>| <span class="built_in">string</span>[] | <span class="literal">undefined</span> | <span class="literal">null</span>, canBeNull?: <span class="built_in">number</span> = 1</span>): <span class="title">Result</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-4-函数重载"><a href="#4-8-4-函数重载" class="headerlink" title="4.8.4 函数重载"></a>4.8.4 函数重载</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">a: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c:<span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">a?: <span class="built_in">number</span>, b?:<span class="built_in">number</span>, c?: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a &amp;&amp; !b &amp;&amp; !c ) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(a &amp;&amp; !b &amp;&amp; !c) <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + a)</span><br><span class="line">    <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; !c) <span class="built_in">console</span>.log(<span class="string">'a+b is: '</span> + (a+b))</span><br><span class="line">    <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; c) <span class="built_in">console</span>.log(<span class="string">'a+b+c is: '</span> + (a+b+c))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line">print(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="4-8-5-可调用和可实例化"><a href="#4-8-5-可调用和可实例化" class="headerlink" title="4.8.5 可调用和可实例化"></a>4.8.5 可调用和可实例化</h3><ol><li>可调用</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可调用</span></span><br><span class="line"><span class="keyword">interface</span> ReturnString &#123;</span><br><span class="line">    (): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 它表示一个返回值为string的函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> foo: ReturnString</span><br><span class="line"><span class="keyword">const</span> bar = foo()</span><br></pre></td></tr></table></figure><p>一个实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Complex &#123;</span><br><span class="line">    (foo: <span class="built_in">string</span>, bar?: <span class="built_in">number</span>, ...others: <span class="built_in">boolean</span>[]): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Overloaded &#123;</span><br><span class="line">    (foo: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">    (foo: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">number</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringOrNumber</span>(<span class="params">foo: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> foo === <span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> foo * foo;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> foo === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`hello <span class="subst">$&#123;foo&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> overloaded: Overloaded  = stringOrNumber</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = overloaded(<span class="string">''</span>)   <span class="comment">// str被推断为string类型</span></span><br><span class="line"><span class="keyword">const</span> num = overloaded(<span class="number">123</span>) <span class="comment">// num 被推断为number类型</span></span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>可实例化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: &#123;<span class="keyword">new</span>(): T; &#125;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BeeKeeper &#123;</span><br><span class="line">    hasMask: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ZooKeeper &#123;</span><br><span class="line">    nametag: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    numLegs: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">Animal</span>&gt;(<span class="params">c: <span class="keyword">new</span> () =&gt; A</span>): <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createInstance(Lion).keeper.nametag;  <span class="comment">// typechecks!</span></span><br><span class="line">createInstance(Bee).keeper.hasMask;   <span class="comment">// typechecks!</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-9-类型断言"><a href="#4-9-类型断言" class="headerlink" title="4.9 类型断言"></a>4.9 类型断言</h2><p>TypeScript允许你以任何方式去重写其推断和分析的类型。这是通过一种被称为“类型断言”的机制来实现的。TypeScript类型断言纯粹是用来告诉编译器，你比它更了解这个类型，并且它不应该再发出错误提示。</p><p>类型断言的一个常见示例是将代码从JavaScript迁移到TypeScript。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;</span><br><span class="line">foo.bar = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>这里的代码发出了错误警告，因为foo的类型推断为{}，即具有零属性的对象。因此，你不能在它的属性上添加bar或bas，你可以通过类型断言来避免此问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">foo.bar = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br></pre></td></tr></table></figure><p>也可以这样进行类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &lt;<span class="built_in">any</span>&gt;&#123;&#125;</span><br><span class="line">foo.bar = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br></pre></td></tr></table></figure><p>但是因为<strong>JSX</strong>中JS和XML混写，因此推荐使用<strong>as</strong>来进行类型断言</p><p>类型断言之所以不被称为“类型转换”，是因为转换通常意味着某种运行时的支持。但是，类型断言纯粹是一个编译时语法，同时，它也为编译器提供了分析代码的方法。</p><p>我们可以也可以利用类型断言来提供代码提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> People &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    hobby: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &lt;People&gt;&#123;</span><br><span class="line">    name: <span class="string">'david'</span>,</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    hobby: <span class="string">'programming'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><p>这也会存在一个同样的问题，如果你忘了某个属性，编译器同样也不会发出错误警告。那么，像这样可能会更好一些。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person1: People = &#123;</span><br><span class="line">    name: <span class="string">'tom'</span>,</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管我们已经证明了类型断言并不那么安全，但它也有用武之地。下面就是一个非常实用的例子，当使用者了解传入参数更具体的类型时，类型断言就能按预期工作。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="function">(<span class="params">event: Event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mouseEvent = event <span class="keyword">as</span> MouseEvent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-10-Freshness"><a href="#4-10-Freshness" class="headerlink" title="4.10 Freshness"></a>4.10 Freshness</h2><p>对于对象字面量的类型，TypeScript 有一个被称之为 「<a href="https://link.zhihu.com/?target=https%3A//github.com/Microsoft/TypeScript/pull/3823">Freshness</a> 」的概念，它也被称为更严格的对象字面量检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logName</span>(<span class="params">something: &#123;name?: <span class="built_in">string</span>&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = &#123;name: <span class="string">'david'</span>, job: <span class="string">'programming'</span>&#125;</span><br><span class="line"><span class="comment">// 结构类型很方便，但是， 如果它允许传入并没有用到的属性</span></span><br><span class="line">logName(p1)</span><br><span class="line"><span class="comment">// 对于对象字面量会进行Fressness检查（更为严格的对象字面量检查）</span></span><br><span class="line">logName(&#123;name: <span class="string">'jack'</span>, job: <span class="string">'backendprogrammer'</span>&#125;)</span><br><span class="line"><span class="comment">// 可以通过添加索引签名来允许字面量对象传递没有显示声明的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logName1</span> (<span class="params">something: &#123;name?: <span class="built_in">string</span>, [x:<span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something.name)</span><br><span class="line">&#125;</span><br><span class="line">logName1(&#123;name: <span class="string">'jack'</span>, job: <span class="string">'backendprogrammer'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-11-类型保护"><a href="#4-11-类型保护" class="headerlink" title="4.11 类型保护"></a>4.11 类型保护</h2><h3 id="4-11-1-使用typeof"><a href="#4-11-1-使用typeof" class="headerlink" title="4.11.1 使用typeof"></a>4.11.1 使用typeof</h3><p>![image-20200427172819778](/Users/liwei/Library/Application Support/typora-user-images/image-20200427172819778.png)</p><h3 id="4-11-2-使用instanceof"><a href="#4-11-2-使用instanceof" class="headerlink" title="4.11.2 使用instanceof"></a>4.11.2 使用instanceof</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">    foo = <span class="number">123</span>;</span><br><span class="line">    common = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bar &#123;</span><br><span class="line">    bar = <span class="number">123</span>;</span><br><span class="line">    common = <span class="string">'123'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Foo)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.common)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Bar) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.common)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typescript能够推断出else中的类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">    foo = <span class="number">123</span>;</span><br><span class="line">    common = <span class="string">'123'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bar &#123;</span><br><span class="line">    bar = <span class="number">123</span>;</span><br><span class="line">    common = <span class="string">'123'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Foo)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)</span><br><span class="line">        <span class="built_in">console</span>.log(arg.common)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-11-3-使用in关键字"><a href="#4-11-3-使用in关键字" class="headerlink" title="4.11.3 使用in关键字"></a>4.11.3 使用in关键字</h3><p>![image-20200427173353893](/Users/liwei/Library/Application Support/typora-user-images/image-20200427173353893.png)</p><h3 id="4-11-4-字面量类型保护"><a href="#4-11-4-字面量类型保护" class="headerlink" title="4.11.4 字面量类型保护"></a>4.11.4 字面量类型保护</h3><p>你可以使用===、==、！==、！=来区分字面量类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo = &#123;</span><br><span class="line">    kind: <span class="string">'foo'</span>;</span><br><span class="line">    foo: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Bar = &#123;</span><br><span class="line">    kind: <span class="string">'bar'</span>;</span><br><span class="line">    bar: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo|Bar</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg.kind === <span class="string">'foo'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-11-5-strictNullChecks编译属性下的null和undefined"><a href="#4-11-5-strictNullChecks编译属性下的null和undefined" class="headerlink" title="4.11.5 strictNullChecks编译属性下的null和undefined"></a>4.11.5 strictNullChecks编译属性下的null和undefined</h3><p>TypeScript可以使用==null和!==null来区分null和undefined</p><p>![image-20200427174255480](/Users/liwei/Library/Application Support/typora-user-images/image-20200427174255480.png)</p><h3 id="4-11-6-自定义类型保护"><a href="#4-11-6-自定义类型保护" class="headerlink" title="4.11.6 自定义类型保护"></a>4.11.6 自定义类型保护</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">    foo: <span class="built_in">number</span>;</span><br><span class="line">    common: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Bar &#123;</span><br><span class="line">    bar: <span class="built_in">number</span>;</span><br><span class="line">    common: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFoo</span>(<span class="params">arg: Foo|Bar</span>): <span class="title">arg</span> <span class="title">is</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (arg <span class="keyword">as</span> Foo).foo !== <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">arg: Foo | Bar</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFoo(arg))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)  <span class="comment">// 正确</span></span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)  <span class="comment">// 错误</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.bar)  <span class="comment">// 正确</span></span><br><span class="line">        <span class="built_in">console</span>.log(arg.foo)  <span class="comment">// 错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-11-7-类型保护和函数回调"><a href="#4-11-7-类型保护和函数回调" class="headerlink" title="4.11.7 类型保护和函数回调"></a>4.11.7 类型保护和函数回调</h3><p>TypeScript不能确定类型保护在回调中一直有效，比如下述代码中变量foo的属性bar可能为为undefined，因此typescript会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo:&#123;bar?: &#123;baz: <span class="built_in">string</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doCalback</span>(<span class="params">callback: () =&gt; <span class="built_in">void</span></span>)</span>&#123;</span><br><span class="line">    callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(foo.bar)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo.bar.baz)</span><br><span class="line">    doCalback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(foo.bar.baz)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20200427175325417](/Users/liwei/Library/Application Support/typora-user-images/image-20200427175325417.png)</p><p>解决方式为把推断的安全值存放在本地的局部变量中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo:&#123;bar?: &#123;baz: <span class="built_in">string</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doCalback</span>(<span class="params">callback: () =&gt; <span class="built_in">void</span></span>)</span>&#123;</span><br><span class="line">    callback()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(foo.bar)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo.bar.baz)</span><br><span class="line">    <span class="keyword">const</span> bar = foo.bar</span><br><span class="line">    doCalback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(bar.baz)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-12-字面量类型"><a href="#4-12-字面量类型" class="headerlink" title="4.12 字面量类型"></a>4.12 字面量类型</h2><h3 id="4-12-1-字符串字面量"><a href="#4-12-1-字符串字面量" class="headerlink" title="4.12.1 字符串字面量"></a>4.12.1 字符串字面量</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Direction = <span class="string">'North'</span> | <span class="string">'East'</span> | <span class="string">'South'</span> | <span class="string">'West'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">distance: <span class="built_in">number</span>, direction: Direction</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;direction&#125;</span>: <span class="subst">$&#123;distance&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">move(<span class="number">1</span>, <span class="string">'North'</span>)</span><br><span class="line">move(<span class="number">2</span>, <span class="string">"West"</span>)</span><br></pre></td></tr></table></figure><h3 id="4-12-3-boolean和number字面量"><a href="#4-12-3-boolean和number字面量" class="headerlink" title="4.12.3 boolean和number字面量"></a>4.12.3 boolean和number字面量</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> oneToFive = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span></span><br><span class="line"><span class="keyword">type</span> Bools = <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trueOrFalse</span>(<span class="params">arg: Bools</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logNumber</span>(<span class="params">num: oneToFive</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line">trueOrFalse(<span class="literal">false</span>)</span><br><span class="line">logNumber(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="4-12-4-基于字符串的枚举"><a href="#4-12-4-基于字符串的枚举" class="headerlink" title="4.12.4 基于字符串的枚举"></a>4.12.4 基于字符串的枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据传入的数组生成key-value结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strEnum</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">o: <span class="built_in">Array</span>&lt;T&gt;</span>): </span>&#123;[K <span class="keyword">in</span> T]: K&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> o.reduce(<span class="function">(<span class="params">res, key</span>) =&gt;</span> &#123;</span><br><span class="line">        res[key] = key;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;, <span class="built_in">Object</span>.create(<span class="literal">null</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后可以使用keyof, typeof来生成字符串的联合类型</span></span><br><span class="line"><span class="keyword">const</span> Direction = strEnum([<span class="string">'North'</span>, <span class="string">'South'</span>, <span class="string">'East'</span>, <span class="string">'West'</span>])</span><br><span class="line"><span class="keyword">type</span> Direction = keyof <span class="keyword">typeof</span> Direction</span><br><span class="line"><span class="keyword">let</span> sample: Direction</span><br><span class="line"></span><br><span class="line">sample = Direction.North</span><br><span class="line">sample = <span class="string">'North'</span></span><br><span class="line">sample = <span class="string">'AnythingElse'</span> <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h2 id="4-13-readonly"><a href="#4-13-readonly" class="headerlink" title="4.13 readonly"></a>4.13 readonly</h2><p>使用readonly关键字来标记属性可以保证数据不可变</p><p>![image-20200428091821889](/Users/liwei/Library/Application Support/typora-user-images/image-20200428091821889.png)</p><p>![image-20200428091943080](/Users/liwei/Library/Application Support/typora-user-images/image-20200428091943080.png)</p><p>我们也可以指定一个类的属性为readonly,然后在声明或在构造函数中初始化它们,如下所示</p><p>![image-20200428092157934](/Users/liwei/Library/Application Support/typora-user-images/image-20200428092157934.png)</p><h3 id="4-13-1-使用readonly的实例"><a href="#4-13-1-使用readonly的实例" class="headerlink" title="4.13.1 使用readonly的实例"></a>4.13.1 使用readonly的实例</h3><ol><li>一个把类型中所有属性转化为只读属性的映射类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是一个readonly映射类型，接收一个泛型T，用来把它所有属性都标记为readonly</span></span><br><span class="line"><span class="keyword">type</span> Foo =  &#123;</span><br><span class="line">    bar: <span class="built_in">number</span>;</span><br><span class="line">    bas: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyReadonly&lt;T&gt; = &#123;</span><br><span class="line">    readonly [K <span class="keyword">in</span> keyof T]: T[K]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ReadonlyFoo = MyReadonly&lt;Foo&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo1: Foo = &#123;bar: <span class="number">123</span>, bas: <span class="number">456</span>&#125;</span><br><span class="line"><span class="keyword">const</span> fooReadonly: ReadonlyFoo = &#123;bar: <span class="number">123</span>, bas: <span class="number">456</span>&#125;</span><br><span class="line">foo.bar = <span class="number">456</span></span><br><span class="line">fooReadonly.bar = <span class="number">789</span>   <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ol start="2"><li>React.js中state和props的使用</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Layout, Menu &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Urls &#125; <span class="keyword">from</span> <span class="string">'@/config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Header, Content &#125; = Layout</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">    readonly [index: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> State &#123;</span><br><span class="line">    menus: <span class="built_in">Array</span>&lt;&#123;</span><br><span class="line">        readonly key: <span class="built_in">string</span></span><br><span class="line">        readonly label: <span class="built_in">string</span></span><br><span class="line">        readonly to: <span class="built_in">string</span></span><br><span class="line">    &#125;&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> PureComponent&lt;Props, State&gt; &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        menus: [</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">'main'</span>,</span><br><span class="line">                label: <span class="string">'首页'</span>,</span><br><span class="line">                to: Urls.MAIN</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">'form'</span>,</span><br><span class="line">                label: <span class="string">'表单设计'</span>,</span><br><span class="line">                to: Urls.FORM</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">'code'</span>,</span><br><span class="line">                label: <span class="string">'代码生成'</span>,</span><br><span class="line">                to: Urls.CODE</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                key: <span class="string">'chart'</span>,</span><br><span class="line">                label: <span class="string">'图表设计'</span>,</span><br><span class="line">                to: Urls.CHART</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    renderMenu(): JSX.Element &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; menus &#125; = <span class="keyword">this</span>.state</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Menu theme=&#123;<span class="string">'dark'</span>&#125; mode=&#123;<span class="string">'horizontal'</span>&#125;&gt;</span><br><span class="line">                &#123;menus.map(<span class="function">(<span class="params">menu</span>) =&gt;</span> (</span><br><span class="line">                    &lt;Menu.Item key=&#123;menu.key&#125;&gt;</span><br><span class="line">                        &lt;Link to=&#123;menu.to&#125;&gt;&#123;menu.label&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>Menu.Item&gt;</span><br><span class="line">                ))&#125;</span><br><span class="line">            &lt;<span class="regexp">/Menu&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    render(): JSX.Element &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;Layout className=&#123;'height100'&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Header&gt;&#123;this.renderMenu()&#125;&lt;/</span>Header&gt;</span><br><span class="line">                &lt;Content&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/Content&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Layout&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">&#123; app &#125;</span>) =&gt;</span> (&#123; ...app.toJS() &#125;))(App)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>绝对不可变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">    readonly [x: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo1: Foo = &#123; <span class="number">0</span>: <span class="number">123</span>, <span class="number">2</span>: <span class="number">345</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo1[<span class="number">0</span>])</span><br><span class="line">foo1[<span class="number">0</span>] = <span class="number">456</span>   <span class="comment">// 报错，只读不可修改</span></span><br><span class="line"><span class="comment">// 以不变的方式使用原生数组,可以使用TypeScript提供的ReadonlyArray&lt;T&gt;接口</span></span><br><span class="line"><span class="keyword">let</span> foo2: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(foo2[<span class="number">0</span>])</span><br><span class="line">foo2.push(<span class="number">4</span>)  <span class="comment">// 报错，只读数组不可添加元素</span></span><br><span class="line">foo2 = foo2.concat(<span class="number">4</span>)  <span class="comment">// 这样是允许的，因为通过concat创建了一个副本</span></span><br></pre></td></tr></table></figure></li><li><p>readonly的自动推断<br>例如在一个class中，如果有一个只有getter、没有setter的属性，它就能被推断为是只读的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animals &#123;</span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">'dog'</span>;</span><br><span class="line">    age: <span class="built_in">number</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> info() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">''</span> + <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal1 = <span class="keyword">new</span> Animals()</span><br><span class="line"><span class="built_in">console</span>.log(animal1.info)</span><br><span class="line">animal1.info = <span class="string">'cat2'</span>   <span class="comment">// 报错，只读属性不可重新赋值</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>readonly和const<br>readonly用于属性， const用于变量声明<br>readonly能确保属性不能直接被使用者修改，但是当你把这个属性交给其他并没有做出这种保证的使用者（出于类型兼容的原因而被允许）时，他们可以修改它</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo1: &#123;</span><br><span class="line">    readonly bar: <span class="built_in">number</span>;</span><br><span class="line">&#125; = &#123;</span><br><span class="line">    bar: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo1.bar = <span class="number">456</span>   <span class="comment">// 报错，只读属性不能被修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iMutateFoo</span>(<span class="params">foo: &#123; bar: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处于类型兼容考虑readonly的属性被修改了</span></span><br><span class="line">    foo.bar = <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iMutateFoo(foo1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">    readonly bar: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iMutateFoo1</span>(<span class="params">foo: Foo</span>) </span>&#123;</span><br><span class="line">    foo.bar = <span class="number">456</span>  <span class="comment">// 因为明确了参数的类型，则此处只读属性bar不可被修改了</span></span><br><span class="line">&#125;</span><br><span class="line">iMutateFoo1(foo1)</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-14-泛型"><a href="#4-14-泛型" class="headerlink" title="4.14 泛型"></a>4.14 泛型</h2><p>设计泛型的关键动机是在成员之间提供有意义的类型约束，这些成员可以是类的实例成员、类的方法、函数的参数、函数返回值。</p><h3 id="4-14-1-使用泛型的实例"><a href="#4-14-1-使用泛型的实例" class="headerlink" title="4.14.1 使用泛型的实例"></a>4.14.1 使用泛型的实例</h3><ol><li>一个队列的例子</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> data:T[] = [];</span><br><span class="line">    push = <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="keyword">this</span>.data.push(item);</span><br><span class="line">    pop = (): T | <span class="function"><span class="params">undefined</span>  =&gt;</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="string">'1'</span>)  <span class="comment">// 报错，指定泛型类型为number类型，不能再添加其他类型的元素了</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>reverse函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span> &lt;<span class="title">T</span>&gt; (<span class="params">arr: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res: T[] = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- )&#123;</span><br><span class="line">        res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverse([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>建议：你可以随意调用泛型的参数，当你使用简单的泛型时，泛型常用T、U、V表示。如果在你的参数里，拥有不止一个泛型，你应该使用一个更语义化的名称，如TKey和TValue。依照惯例，以T作为泛型的前缀</p></li><li><p>一个用于加载JSON文件的返回值函数， 它会返回任何你传入的类型的Promise</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = &lt;T&gt;(config: &#123;url: <span class="built_in">string</span>; headers?: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125;&#125;): <span class="built_in">Promise</span>&lt;T&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchConfig = &#123;</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        Accept: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        ...(config.headers || &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fetch(config.url, fetchConfig).then&lt;T&gt;(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoadUserResponse = &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        emial: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getJSON&lt;LoadUserResponse&gt;(&#123; url: <span class="string">'http://example.com/users'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadUsers().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.user.name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>泛型被用于函数参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animals =  &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Website = &#123;</span><br><span class="line">    url: <span class="built_in">string</span>;</span><br><span class="line">    count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log&lt;Animals&gt;(&#123;</span><br><span class="line">    name: <span class="string">'dog'</span>,</span><br><span class="line">    age: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line">log&lt;Website&gt;(&#123;</span><br><span class="line">    url: <span class="string">'http://baidu.com'</span>,</span><br><span class="line">    count: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-15-类型推断"><a href="#4-15-类型推断" class="headerlink" title="4.15 类型推断"></a>4.15 类型推断</h2><p>TypeScript可以根据一些简单的规则来推断（然后检查）变量的类型</p><ul><li><p>定义变量<br>变量的类型根据定义来推断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">123</span>  <span class="comment">// 推断为number</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'hello'</span> <span class="comment">// 推断为string</span></span><br><span class="line">b = <span class="number">123</span>      <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li><li><p>函数返回值<br>根据return语句来判断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推断返回类型为number</span></span><br></pre></td></tr></table></figure></li><li><p>赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Adder = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> foo1: Adder = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b   <span class="comment">// a,b被推断为number类型</span></span><br></pre></td></tr></table></figure></li><li><p>对象字面量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a = <span class="string">'2'</span>  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>解构</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; a &#125; = obj</span><br><span class="line">a = <span class="string">'2'</span>  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-15-1-noImplicitAny"><a href="#4-15-1-noImplicitAny" class="headerlink" title="4.15.1 noImplicitAny"></a>4.15.1 noImplicitAny</h3><p>标记noImplicitAny用来指示编译器，在无法推断一个变量的类型时，发出一个错误（或者只将其作为一个隐式的any）。此时，你可以做如下处理。</p><ul><li>通过显式添加：any的类型注解，来让它成为一个any类型。</li><li>通过一些更准确的类型注解来帮助TypeScript推断类型。</li></ul><h2 id="4-16-类型的兼容性"><a href="#4-16-类型的兼容性" class="headerlink" title="4.16 类型的兼容性"></a>4.16 类型的兼容性</h2><p>类型兼容性用于确定一个类型能否赋值给其他类型。如string类型与number类型不兼容，因此不能相互赋值。</p><h3 id="4-16-1-稳定性"><a href="#4-16-1-稳定性" class="headerlink" title="4.16.1 稳定性"></a>4.16.1 稳定性</h3><p>TypeScript类型系统设计得很方便，它允许你有一些不正确的行为。例如，任何类型都能被赋值给any，这意味着编译器允许你做任何想做的事情。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo1: <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">foo1 = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h3 id="4-16-2-结构化类型的兼容性"><a href="#4-16-2-结构化类型的兼容性" class="headerlink" title="4.16.2 结构化类型的兼容性"></a>4.16.2 结构化类型的兼容性</h3><p>TypeScript对象是一种结构化的类型，这意味着只要结构匹配，名称也就无关紧要了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Point2D &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> x: <span class="built_in">number</span>, <span class="keyword">public</span> y: <span class="built_in">number</span></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p: Point;</span><br><span class="line">p = <span class="keyword">new</span> Point2D(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="4-16-3-函数的兼容性"><a href="#4-16-3-函数的兼容性" class="headerlink" title="4.16.3 函数的兼容性"></a>4.16.3 函数的兼容性</h3><p>当你比较两个函数类型是否兼容时，下面是一些需要考虑的事情</p><ol><li>返回类型<br>类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型。</li></ol><p>![image-20200428105250170](/Users/liwei/Library/Application Support/typora-user-images/image-20200428105250170.png)</p><ol start="2"><li><p>参数数量<br>要查看 x 是否能赋值给 y，首先看它们的参数列表，x 的每个参数必须能在 y 里找到对应类型的参数，注意的是参数的名字相同与否无所谓，只看它们的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="function">(<span class="params">b: <span class="built_in">number</span>, s: <span class="built_in">string</span></span>) =&gt;</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">y = x; <span class="comment">// OK</span></span><br><span class="line">x = y; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></li><li><p>可选参数和rest参数<br>为了方便起见，可选参数（预先确定的）和rest参数（任何数量的参数）是兼容的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aoo = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="function">(<span class="params">x?: <span class="built_in">number</span>, y?:<span class="built_in">number</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bas = <span class="function">(<span class="params">...args: <span class="built_in">number</span>[]</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">aoo = bar</span><br><span class="line">bas = bar</span><br><span class="line">bas = aoo</span><br><span class="line"><span class="comment">// 可选的参数（如上面例子中的bar）与不可选的参数（如上面例子中的foo），只有在strictNullChecks为false时兼容</span></span><br></pre></td></tr></table></figure></li><li><p>函数参数类型兼容性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Event &#123;</span><br><span class="line">    timestamp: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> MouseEvent <span class="keyword">extends</span> Event &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> KeyEvent <span class="keyword">extends</span> Event&#123;</span><br><span class="line">    keyCode: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> EventType &#123;</span><br><span class="line">    Mouse,</span><br><span class="line">    KeyBoard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">eventType: EventType, handler: (n: Event) =&gt; <span class="built_in">void</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不安全，但是常用</span></span><br><span class="line"><span class="keyword">const</span> handler = <span class="function">(<span class="params">(<span class="params">e: MouseEvent</span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e.x+ ',' + e.y</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="params">addEventListener</span>(<span class="params">EventType.Mouse, handler</span>) // 报错</span></span><br><span class="line"><span class="function">// 解决方案</span></span><br><span class="line"><span class="function"><span class="params">const</span> <span class="params">handler1</span> = &lt;(<span class="params">e: Event</span>) =&gt;</span> <span class="built_in">void</span>&gt;<span class="function">(<span class="params">(<span class="params">e: MouseEvent</span>) =&gt; <span class="built_in">console</span>.log(<span class="params">e.x+ ',' + e.y</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="params">addEventListener</span>(<span class="params">EventType.Mouse, handler1</span>) // 报错</span></span><br><span class="line"><span class="function">// 或者</span></span><br><span class="line"><span class="function"><span class="params">const</span> <span class="params">handler2</span> = (<span class="params">(<span class="params">e: Event</span>) =&gt; <span class="built_in">console</span>.log(<span class="params">(<span class="params">&lt;MouseEvent&gt;e</span>).x+ ',' + (<span class="params">&lt;MouseEvent&gt;e</span>).y</span>)</span>)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-16-4-枚举类型的兼容性"><a href="#4-16-4-枚举类型的兼容性" class="headerlink" title="4.16.4 枚举类型的兼容性"></a>4.16.4 枚举类型的兼容性</h3><ol><li><p>枚举与数字类型是兼容的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">    Ready,</span><br><span class="line">    Waiting</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> status1 = Status.Ready</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">0</span></span><br><span class="line">status1 = num</span><br></pre></td></tr></table></figure></li><li><p>来自不同枚举的枚举变量，被认为是不兼容的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">    Ready,</span><br><span class="line">    Waiting</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">    Red,</span><br><span class="line">    Blue,</span><br><span class="line">    Green</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> status1 = Status.Ready</span><br><span class="line"><span class="keyword">let</span> color1 = Color.Blue</span><br><span class="line">status1 = color1  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-16-5-类的类型兼容"><a href="#4-16-5-类的类型兼容" class="headerlink" title="4.16.5 类的类型兼容"></a>4.16.5 类的类型兼容</h3><p>只比较实例成员和方法，构造函数和静态成员不起作用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal1 &#123;</span><br><span class="line">    <span class="keyword">static</span> feet: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Size &#123;</span><br><span class="line">    <span class="keyword">static</span> feet: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">meters: <span class="built_in">number</span></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: Animal1</span><br><span class="line"><span class="keyword">let</span> s: Size = <span class="keyword">new</span> Size(<span class="number">1</span>)</span><br><span class="line">a = s  <span class="comment">// 可以赋值</span></span><br><span class="line">s = a  <span class="comment">// 可以赋值</span></span><br></pre></td></tr></table></figure><p>私有的和受保护的成员必须来自相同的类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal1 &#123;</span><br><span class="line">    <span class="keyword">protected</span> feet: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal1&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal1: Animal1;</span><br><span class="line"><span class="keyword">let</span> cat1: Cat = <span class="keyword">new</span> Cat();</span><br><span class="line">animal1 = cat1  <span class="comment">// 可以赋值</span></span><br><span class="line">cat1 = animal1 <span class="comment">// 可以赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  Size &#123;</span><br><span class="line">    <span class="keyword">protected</span> feet: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> size: Size;</span><br><span class="line">animal1 = size <span class="comment">// 错误, 不能赋值</span></span><br><span class="line">size = animal1  <span class="comment">// 错误，不能赋值</span></span><br></pre></td></tr></table></figure><h3 id="4-16-6-泛型类型兼容"><a href="#4-16-6-泛型类型兼容" class="headerlink" title="4.16.6 泛型类型兼容"></a>4.16.6 泛型类型兼容</h3><p>TypeScript 类型系统基于变量的结构，仅当类型参数在被一个成员使用时，才会影响兼容性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x: Empty&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> y: Empty&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">x = y</span><br><span class="line"><span class="comment">// 泛型T因为没有被任何接口的任何成员使用，因此并不会影响到兼容性</span></span><br></pre></td></tr></table></figure><p>如果尚未实例化泛型参数，则在检查兼容性之前将其替换为 any：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">let</span> identity = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt; (<span class="params">x: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">let</span> reverse = <span class="function"><span class="keyword">function</span>&lt;<span class="title">U</span>&gt; (<span class="params">y: U</span>): <span class="title">U</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identity = reverse <span class="comment">// (x: any) =&gt; any 类型与(y: any) =&gt; any匹配</span></span><br></pre></td></tr></table></figure><p>当泛型被成员使用时，它将在实例化泛型后影响兼容性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Empty&lt;T&gt; &#123;</span><br><span class="line">    data: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x: Empty&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> y: Empty&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">x = y <span class="comment">// 错误,不能赋值</span></span><br></pre></td></tr></table></figure><h2 id="4-17-never"><a href="#4-17-never" class="headerlink" title="4.17 never"></a>4.17 never</h2><p>Never类型是任何类型的子类型，也可以赋值给任何类型， 然而，没有类型是never的子类型或可以赋值给never类型（除了never类型本身之外），即使any也不可以赋值给never类型，通常表现为抛出异常或者无法执行到终止点（例如无限循环）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: never;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为 never 类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 never类型</span></span><br><span class="line">x = <span class="function">(<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 运行正确，<span class="params">never</span> 类型可以赋值给 数字类型</span></span><br><span class="line"><span class="function"><span class="params">y</span> = (<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">message</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为 <span class="params">never</span> 的函数可以是无限循环这种无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">loop</span><span class="params">()</span>: <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">while</span> (<span class="params"><span class="literal">true</span></span>) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-18-辨析联合类型"><a href="#4-18-辨析联合类型" class="headerlink" title="4.18 辨析联合类型"></a>4.18 辨析联合类型</h2><p>当类中含有字面量成员时，我们可以用该类的属性来辨析联合类型</p><p>如果你使用类型保护风格的检查（即==、===、！=、！==），或者使用具有判断性的属性（在这里是kind），TypeScript将会认为你所使用的对象类型必须要具有特定的字面量，并且为你进行类型缩小。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">    kind: <span class="string">'square'</span>;</span><br><span class="line">    size: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Rectangle &#123;</span><br><span class="line">    kind: <span class="string">'rectangle'</span>;</span><br><span class="line">    width: <span class="built_in">number</span>;</span><br><span class="line">    height: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    kind: <span class="string">'circle'</span>;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Square | Rectangle | Circle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.kind === <span class="string">'square'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.size  * s.size</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.kind === <span class="string">'rectangle'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.width * s.height</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.kind === <span class="string">'circle'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> _exhaustiveCheck: never = s</span><br><span class="line">        <span class="keyword">return</span> _exhaustiveCheck</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areaBySwitch</span>(<span class="params">s: Shape</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'square'</span>:</span><br><span class="line">            <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'rectangle'</span>:</span><br><span class="line">            <span class="keyword">return</span> s.width * s.height;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'circle'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">const</span> _exhaustiveCheck: never = s</span><br><span class="line">            <span class="keyword">return</span> _exhaustiveCheck</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-18-1-版本控制"><a href="#4-18-1-版本控制" class="headerlink" title="4.18.1 版本控制"></a>4.18.1 版本控制</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DTO = | &#123;</span><br><span class="line">    version: <span class="literal">undefined</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125; | &#123;</span><br><span class="line">    version: <span class="number">1</span>;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125; | &#123;</span><br><span class="line">    version: <span class="number">2</span>;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">    middleName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printDTO</span>(<span class="params">dto: DTO</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dto.version == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dto.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dto.version === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(dto.firstName, dto.lastName);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dto.version === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(dto.firstName, dto.middleName, dto.lastName);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'===================================='</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> _exhaustiveCheck: never = dto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-18-2-redux中定义ActionTypes的应用"><a href="#4-18-2-redux中定义ActionTypes的应用" class="headerlink" title="4.18.2 redux中定义ActionTypes的应用"></a>4.18.2 redux中定义ActionTypes的应用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore  &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">type</span> ActionTypes = <span class="string">'INCREMENT'</span> | <span class="string">'DECREMENT'</span></span><br><span class="line"><span class="keyword">type</span> Action = &#123;</span><br><span class="line">    <span class="keyword">type</span>: ActionTypes</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = 0, action: Action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter);</span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">&#125;)</span><br><span class="line">store.dispatch(&#123; <span class="keyword">type</span>: <span class="string">'INCREMENT'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="keyword">type</span>: <span class="string">'INCREMENT'</span> &#125;)</span><br><span class="line">store.dispatch(&#123; <span class="keyword">type</span>: <span class="string">'DECREMENT'</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-19-索引签名"><a href="#4-19-索引签名" class="headerlink" title="4.19 索引签名"></a>4.19 索引签名</h2><h3 id="4-19-1-JavaScript中时候用对象作为key进行签名默认调用toString"><a href="#4-19-1-JavaScript中时候用对象作为key进行签名默认调用toString" class="headerlink" title="4.19.1 JavaScript中时候用对象作为key进行签名默认调用toString()"></a>4.19.1 JavaScript中时候用对象作为key进行签名默认调用toString()</h3><p>可以用字符串访问JavaScript中的对象（在TypeScript中也一样），并保存对其他对象的引用除字符串外，它也可以保存任意的JavaScript对象，例如一个类的实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'to string is called'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = &#123;&#125;</span><br><span class="line">foo[obj] = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>当你向索引签名传入一个其他对象时，JavaScript会在得到结果之前先调用toString方法。</p><p>只要索引位置使用了obj，toString方法都将被调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'to string is called'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = &#123;&#125;</span><br><span class="line">foo[obj] = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[obj])</span><br></pre></td></tr></table></figure><p>![image-20200502141249208](/Users/liwei/Library/Application Support/typora-user-images/image-20200502141249208.png)</p><h3 id="4-19-2-TypeScript索引签名"><a href="#4-19-2-TypeScript索引签名" class="headerlink" title="4.19.2 TypeScript索引签名"></a>4.19.2 TypeScript索引签名</h3><p>首先，因为JavaScript在任何一个对象索引签名上都会隐式调用toString方法，而在TypeScript中它将会抛出一个错误提示</p><p>![image-20200502141542000](/Users/liwei/Library/Application Support/typora-user-images/image-20200502141542000.png)</p><p>我们必须这么做才能解决报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo1: <span class="built_in">any</span> = &#123;&#125;</span><br><span class="line">foo[obj.toString()] = <span class="string">'World'</span></span><br></pre></td></tr></table></figure><h3 id="1-声明索引签名"><a href="#1-声明索引签名" class="headerlink" title="1. 声明索引签名"></a>1. 声明索引签名</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mailBox: &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">mailBox[<span class="string">'a'</span>] = &#123;</span><br><span class="line">    content: <span class="string">'a'</span></span><br><span class="line">&#125;</span><br><span class="line">mailBox[<span class="string">'b'</span>] = &#123;</span><br><span class="line">    content: <span class="string">'b'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引签名的名称，如{[index：string]：{message：string}}里的index，除提高了可读性外，并没有任何意义。例如，如果有一个用户名，你可以使用{username：string}：{message：string}，这有助于下一个开发者理解你的代码。</p><h3 id="2-所有成员必须符合字符串索引签名"><a href="#2-所有成员必须符合字符串索引签名" class="headerlink" title="2. 所有成员必须符合字符串索引签名"></a>2. 所有成员必须符合字符串索引签名</h3><p>![image-20200502142423346](/Users/liwei/Library/Application Support/typora-user-images/image-20200502142423346.png)</p><h3 id="3-使用一组有限的字符串字面量"><a href="#3-使用一组有限的字符串字面量" class="headerlink" title="3. 使用一组有限的字符串字面量"></a>3. 使用一组有限的字符串字面量</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> keys = <span class="string">'name'</span> | <span class="string">'age'</span> | <span class="string">'job'</span></span><br><span class="line"><span class="keyword">type</span> Index = &#123; [k <span class="keyword">in</span> keys]?: <span class="built_in">number</span> | <span class="built_in">string</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj: Index = &#123;</span><br><span class="line">    name: <span class="string">'david'</span>,</span><br><span class="line">    age: <span class="number">26</span>,</span><br><span class="line">    job: <span class="string">'frontender'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-同时拥有string和number类型的索引签名"><a href="#4-同时拥有string和number类型的索引签名" class="headerlink" title="4. 同时拥有string和number类型的索引签名"></a>4. 同时拥有string和number类型的索引签名</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Obj &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: Obj = &#123;&#125;</span><br><span class="line">obj[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">obj[<span class="number">1</span>] = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h3 id="5-索引签名的嵌套"><a href="#5-索引签名的嵌套" class="headerlink" title="5. 索引签名的嵌套"></a>5. 索引签名的嵌套</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NestedCSS &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;  <span class="comment">// 在strictNullChecks = false时，索引签名可以为undefined</span></span><br><span class="line">    [selector: <span class="built_in">string</span>]: <span class="built_in">string</span> | NestedCSS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> example: NestedCSS = &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    <span class="string">'.subclass'</span>: &#123;</span><br><span class="line">        color: <span class="string">'blue'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽量不要用这种方式把字符串索引签名与有效变量混合使用。否则，如果属性名称中有拼写错误，这个错误将不会被捕获。</p><p>![image-20200502143859937](/Users/liwei/Library/Application Support/typora-user-images/image-20200502143859937.png)</p><p>相反，我们要把索引签名分离到自己的属性里，如命名为nest，或children、subnodes等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NestedCSS &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;  <span class="comment">// 在strictNullChecks = false时，索引签名可以为undefined</span></span><br><span class="line">    nest?: &#123;</span><br><span class="line">        [selector: <span class="built_in">string</span>]: NestedCSS</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> example: NestedCSS = &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    nest: &#123;</span><br><span class="line">        <span class="string">'.subclass'</span>: &#123;</span><br><span class="line">            color: <span class="string">'blue'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'.subclass1'</span>: &#123;</span><br><span class="line">            color: <span class="string">'red'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候如果属性名出现拼写错误就能正常进行错误提示了</p><p>![image-20200502144259093](/Users/liwei/Library/Application Support/typora-user-images/image-20200502144259093.png)</p><h3 id="6-从索引签名中排除某些属性"><a href="#6-从索引签名中排除某些属性" class="headerlink" title="6. 从索引签名中排除某些属性"></a>6. 从索引签名中排除某些属性</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FieldState = &#123;</span><br><span class="line">    value: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FormState = &#123; isValid: <span class="built_in">boolean</span> &#125; &amp; &#123; [fieldName: <span class="built_in">string</span>]: FieldState&#125;</span><br><span class="line"><span class="comment">// 尽管可以这么来排除属性声明一种TypeScript类型， 但是不能使用该类型进行对象创建</span></span><br><span class="line"><span class="keyword">const</span> form: FormState = &#123;</span><br><span class="line">    isValid: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20200502145046101](/Users/liwei/Library/Application Support/typora-user-images/image-20200502145046101.png)</p><h2 id="4-20-错误处理"><a href="#4-20-错误处理" class="headerlink" title="4.20 错误处理"></a>4.20 错误处理</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  value: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  error?: <span class="built_in">string</span>;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &lt; <span class="number">0</span> || value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; error: <span class="string">"Invalid Value"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-21-混合"><a href="#4-21-混合" class="headerlink" title="4.21 混合"></a>4.21 混合</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数类型</span></span><br><span class="line"><span class="keyword">type</span> Constructor&lt;T = &#123;&#125;&gt; = <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性的混合实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimesTamped</span>&lt;<span class="title">TBase</span> <span class="title">extends</span> <span class="title">Constructor</span>&gt;(<span class="params">Base: TBase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> Base &#123;</span><br><span class="line">        timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性和方法的混合实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Activatable</span>&lt;<span class="title">TBase</span> <span class="title">extends</span> <span class="title">Constructor</span>&gt;(<span class="params">Base: TBase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> Base &#123;</span><br><span class="line">        isActivated = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        activated()&#123;</span><br><span class="line">            <span class="keyword">this</span>.isActivated = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deactivated()&#123;</span><br><span class="line">            <span class="keyword">this</span>.isActivated = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单类</span></span><br><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">    name = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name?: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过混合获得有时间戳的用户</span></span><br><span class="line"><span class="keyword">const</span> TimestampUser = TimesTamped(User);</span><br><span class="line"><span class="keyword">const</span> timestampUser = <span class="keyword">new</span> TimestampUser();</span><br><span class="line"><span class="built_in">console</span>.log(timestampUser.timestamp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过混合获取有时间戳并可以激活禁用的用户</span></span><br><span class="line"><span class="keyword">const</span> TimestampActivatedUser = TimesTamped(Activatable(User));</span><br><span class="line"><span class="keyword">const</span> timestampActivatedUser = <span class="keyword">new</span> TimestampActivatedUser(<span class="string">'david'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timestampActivatedUser.name, timestampActivatedUser.timestamp)</span><br></pre></td></tr></table></figure><h2 id="4-22-ThisType"><a href="#4-22-ThisType" class="headerlink" title="4.22 ThisType"></a>4.22 ThisType</h2><p>通过ThisType，我们可以在对象字面量中输入this，并提供通过上下文类型控制this类型的便捷方式，它只有在–noImplicitThis的选项下才有效。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ObjectDescriptor&lt;D, M&gt; = &#123;</span><br><span class="line">  data?: D;</span><br><span class="line">  methods: M &amp; ThisType&lt;D &amp; M&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeObject</span>&lt;<span class="title">D</span>, <span class="title">M</span>&gt;(<span class="params">desc: ObjectDescriptor&lt;D, M&gt;</span>): <span class="title">D</span> &amp; <span class="title">M</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data: object = desc.data || &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> methods: object = desc.methods;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = makeObject(&#123;</span><br><span class="line">  data: &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    moveBy(dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.x += dx;</span><br><span class="line">      <span class="keyword">this</span>.y += dy;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.x = <span class="number">10</span>;</span><br><span class="line">obj.y = <span class="number">20</span>;</span><br><span class="line">obj.moveBy(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.x, obj.y)</span><br></pre></td></tr></table></figure><h1 id="五-关于JSX"><a href="#五-关于JSX" class="headerlink" title="五.关于JSX"></a>五.关于JSX</h1><p>JSX允许用户在JavaScript中书写类似于HTML的视图代码，因此你可以这样做</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cytoscape.js教程</title>
      <link href="/2020/05/16/2020-2020-05-16-cytoscape-js%E6%95%99%E7%A8%8B/"/>
      <url>/2020/05/16/2020-2020-05-16-cytoscape-js%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Cytoscape-js简介与安装"><a href="#一-Cytoscape-js简介与安装" class="headerlink" title="一. Cytoscape.js简介与安装"></a>一. Cytoscape.js简介与安装</h1><h2 id="1-1-Cytoscape-js是什么？"><a href="#1-1-Cytoscape-js是什么？" class="headerlink" title="1.1 Cytoscape.js是什么？"></a>1.1 Cytoscape.js是什么？</h2><p>cytoscape.js是一个做网页可视化的常用工具 。cytoscape.js包含图论模型和可选的渲染器，用于显示交互式图形。该库旨在使程序员和科学家尽可能轻松地在他们的应用程序中使用图形理论，无论是用于Node.js应用程序中的服务器端分析还是用于丰富的用户界面。 </p><h2 id="1-2-Cytoscape-js安装及HelloWorld"><a href="#1-2-Cytoscape-js安装及HelloWorld" class="headerlink" title="1.2 Cytoscape.js安装及HelloWorld"></a>1.2 Cytoscape.js安装及HelloWorld</h2><h3 id="1-2-1-使用包管理工具进行安装"><a href="#1-2-1-使用包管理工具进行安装" class="headerlink" title="1.2.1 使用包管理工具进行安装"></a>1.2.1 使用包管理工具进行安装</h3><ul><li>npm : <code>npm install cytoscape</code></li><li>bower : <code>bower install cytoscape</code></li><li>jspm : <code>jspm install npm:cytoscape</code></li></ul><h3 id="1-2-2-使用Script标签直接引入"><a href="#1-2-2-使用Script标签直接引入" class="headerlink" title="1.2.2 使用Script标签直接引入"></a>1.2.2 使用Script标签直接引入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;cytoscape.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-HelloWorld"><a href="#1-2-3-HelloWorld" class="headerlink" title="1.2.3 HelloWorld"></a>1.2.3 HelloWorld</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cy = cytoscape(&#123;</span><br><span class="line">  container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>) <span class="comment">// container to render in</span></span><br><span class="line">&#125;);</span><br><span class="line">也可以给container传递jQuery实例</span><br><span class="line"><span class="keyword">var</span> cy = cytoscape(&#123;</span><br><span class="line">  container: $(<span class="string">'#cy'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-2-4-常用参数"><a href="#1-2-4-常用参数" class="headerlink" title="1.2.4 常用参数"></a>1.2.4 常用参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// very commonly used options</span></span><br><span class="line">  container: <span class="literal">undefined</span>,</span><br><span class="line">  elements: [ <span class="comment">/* ... */</span> ],</span><br><span class="line">  style: [ <span class="comment">/* ... */</span> ],</span><br><span class="line">  layout: &#123; <span class="attr">name</span>: <span class="string">'grid'</span> <span class="comment">/* , ... */</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initial viewport state:</span></span><br><span class="line">  zoom: <span class="number">1</span>,</span><br><span class="line">  pan: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// interaction options:</span></span><br><span class="line">  minZoom: <span class="number">1e-50</span>,</span><br><span class="line">  maxZoom: <span class="number">1e50</span>,</span><br><span class="line">  zoomingEnabled: <span class="literal">true</span>,</span><br><span class="line">  userZoomingEnabled: <span class="literal">true</span>,</span><br><span class="line">  panningEnabled: <span class="literal">true</span>,</span><br><span class="line">  userPanningEnabled: <span class="literal">true</span>,</span><br><span class="line">  boxSelectionEnabled: <span class="literal">true</span>,</span><br><span class="line">  selectionType: <span class="string">'single'</span>,</span><br><span class="line">  touchTapThreshold: <span class="number">8</span>,</span><br><span class="line">  desktopTapThreshold: <span class="number">4</span>,</span><br><span class="line">  autolock: <span class="literal">false</span>,</span><br><span class="line">  autoungrabify: <span class="literal">false</span>,</span><br><span class="line">  autounselectify: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// rendering options:</span></span><br><span class="line">  headless: <span class="literal">false</span>,</span><br><span class="line">  styleEnabled: <span class="literal">true</span>,</span><br><span class="line">  hideEdgesOnViewport: <span class="literal">false</span>,</span><br><span class="line">  textureOnViewport: <span class="literal">false</span>,</span><br><span class="line">  motionBlur: <span class="literal">false</span>,</span><br><span class="line">  motionBlurOpacity: <span class="number">0.2</span>,</span><br><span class="line">  wheelSensitivity: <span class="number">1</span>,</span><br><span class="line">  pixelRatio: <span class="string">'auto'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-图形操作"><a href="#二-图形操作" class="headerlink" title="二. 图形操作"></a>二. 图形操作</h1><h2 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h2><p><code>cy.add()</code></p><h3 id="1-1-添加单个节点"><a href="#1-1-添加单个节点" class="headerlink" title="1.1 添加单个节点"></a>1.1 添加单个节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.add(&#123;</span><br><span class="line">    group: <span class="string">'nodes'</span>,</span><br><span class="line">    data: &#123; <span class="attr">weight</span>: <span class="number">75</span> &#125;,</span><br><span class="line">    position: &#123; <span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-2-添加节点和边"><a href="#1-2-添加节点和边" class="headerlink" title="1.2 添加节点和边"></a>1.2 添加节点和边</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eles = cy.add([</span><br><span class="line">  &#123; <span class="attr">group</span>: <span class="string">'nodes'</span>, <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="string">'n0'</span> &#125;, <span class="attr">position</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">group</span>: <span class="string">'nodes'</span>, <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="string">'n1'</span> &#125;, <span class="attr">position</span>: &#123; <span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">200</span> &#125; &#125;,</span><br><span class="line">  &#123; <span class="attr">group</span>: <span class="string">'edges'</span>, <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="string">'e0'</span>, <span class="attr">source</span>: <span class="string">'n0'</span>, <span class="attr">target</span>: <span class="string">'n1'</span> &#125; &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h2 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2. 删除元素"></a>2. 删除元素</h2><p><code>cy.remove()</code></p><h3 id="2-1-移除单个元素"><a href="#2-1-移除单个元素" class="headerlink" title="2.1 移除单个元素"></a>2.1 移除单个元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = cy.$(<span class="string">'#j'</span>);</span><br><span class="line">cy.remove( j );</span><br></pre></td></tr></table></figure><h3 id="2-2-移除集合中的元素"><a href="#2-2-移除集合中的元素" class="headerlink" title="2.2 移除集合中的元素"></a>2.2 移除集合中的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = cy.elements(<span class="string">'node[weight &gt; 50]'</span>);</span><br><span class="line">cy.remove( collection );</span><br></pre></td></tr></table></figure><h3 id="2-3-使用选择器来进行元素删除"><a href="#2-3-使用选择器来进行元素删除" class="headerlink" title="2.3 使用选择器来进行元素删除"></a>2.3 使用选择器来进行元素删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = cy.elements(<span class="string">'node[weight &gt; 50]'</span>);</span><br><span class="line">cy.remove( collection );</span><br></pre></td></tr></table></figure><h2 id="3-使用集合"><a href="#3-使用集合" class="headerlink" title="3. 使用集合"></a>3. 使用集合</h2><p><code>cy.collection()</code> — 获取一个空集合</p><p>例如使用集合保存被点击过的节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = cy.collection();</span><br><span class="line">cy.nodes().on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clickedNode = e.target;</span><br><span class="line"></span><br><span class="line">  collection = collection.union(clickedNode);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-使用getElementById-来根据id获取指定元素"><a href="#4-使用getElementById-来根据id获取指定元素" class="headerlink" title="4. 使用getElementById()来根据id获取指定元素"></a>4. 使用getElementById()来根据id获取指定元素</h2><p><code>cy.getElementById( id )</code>  参数为元素的id值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.getElementById(<span class="string">'j'</span>);</span><br><span class="line">或者使用下列方式</span><br><span class="line">cy.getElementById(<span class="string">'j'</span>);</span><br></pre></td></tr></table></figure><h2 id="5-元素匹配"><a href="#5-元素匹配" class="headerlink" title="5. 元素匹配"></a>5. 元素匹配</h2><h3 id="5-1-cy-selector"><a href="#5-1-cy-selector" class="headerlink" title="5.1 cy.$( selector )"></a>5.1 cy.$( selector )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.$(<span class="string">"#a"</span>)  <span class="comment">// 获取id值为a的元素</span></span><br></pre></td></tr></table></figure><h3 id="5-2-cy-elements-selector"><a href="#5-2-cy-elements-selector" class="headerlink" title="5.2 cy.elements( selector )"></a>5.2 cy.elements( selector )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.elements(<span class="string">'[weight &gt; 50]'</span>);  <span class="comment">// 获取权重大于50的元素</span></span><br></pre></td></tr></table></figure><h3 id="5-3-cy-nodes-selector"><a href="#5-3-cy-nodes-selector" class="headerlink" title="5.3 cy.nodes( selector )"></a>5.3 cy.nodes( selector )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.nodes(<span class="string">'[weight &gt; 50]'</span>);   <span class="comment">// 获取权重大于50的节点</span></span><br></pre></td></tr></table></figure><h3 id="5-4-cy-edges-selector"><a href="#5-4-cy-edges-selector" class="headerlink" title="5.4 cy.edges( selector )"></a>5.4 cy.edges( selector )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.edges(<span class="string">'[source = "j"]'</span>); <span class="comment">// 获取源点为id为j的节点的边</span></span><br></pre></td></tr></table></figure><h3 id="5-5-cy-filter-selector"><a href="#5-5-cy-filter-selector" class="headerlink" title="5.5 cy.filter( selector )"></a>5.5 cy.filter( selector )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.filter(<span class="string">'[weight &gt; 50]'</span>);</span><br></pre></td></tr></table></figure><h3 id="5-6-cy-filter-ele-i-eles-gt"><a href="#5-6-cy-filter-ele-i-eles-gt" class="headerlink" title="5.6 cy.filter( ( ele, i, eles ) =&gt; {} )"></a>5.6 cy.filter( ( ele, i, eles ) =&gt; {} )</h3><p>使用回调函数的方式实现上面用选择器匹配的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element.isNode() &amp;&amp; element.data(<span class="string">'weight'</span>) &gt; <span class="number">50</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-批量操作"><a href="#6-批量操作" class="headerlink" title="6. 批量操作"></a>6. 批量操作</h2><p>这允许在不触发多个样式计算或多个元素重绘的情况下操作元素。此函数对于同时对元素进行许多更改非常有用。当指定的回调函数完成时，只有需要它的元素才会更新它们的样式，而呈现器最多只会重新绘制一次。</p><p>包含下列三个API:</p><ul><li>cy.batch(() =&gt; { // do something })</li><li>cy.startBatch()  — 手动开始批量操作,主要用于异步操作</li><li>cy.endBatch() – 手动结束批量操作，主要用于异步操作</li></ul><h2 id="6-1-不使用批处理涉及到对元素的多个样式更新"><a href="#6-1-不使用批处理涉及到对元素的多个样式更新" class="headerlink" title="6.1 不使用批处理涉及到对元素的多个样式更新"></a>6.1 不使用批处理涉及到对元素的多个样式更新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.$(<span class="string">'#j'</span>)</span><br><span class="line">  .data(<span class="string">'weight'</span>, <span class="string">'70'</span>)   <span class="comment">// 样式更新</span></span><br><span class="line">  .addClass(<span class="string">'funny'</span>)      <span class="comment">// 样式更新</span></span><br><span class="line">  .removeClass(<span class="string">'serious'</span>) <span class="comment">// 样式更新</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 至少一次，至多3次重绘，这取决于上述操作执行的速度</span></span><br></pre></td></tr></table></figure><p>这对于少数元素的样式更新没有问题，但是如果对于大批量的元素进行上述操作，会造成很多冗余的重绘，导致性能问题，下面用批处理来解决上述问题</p><h2 id="6-2-批处理中对元素的多样式更新"><a href="#6-2-批处理中对元素的多样式更新" class="headerlink" title="6.2 批处理中对元素的多样式更新"></a>6.2 批处理中对元素的多样式更新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.batch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cy.$(<span class="string">'#j'</span>)</span><br><span class="line">    .data(<span class="string">'weight'</span>, <span class="string">'70'</span>)</span><br><span class="line">    .addClass(<span class="string">'funny'</span>)</span><br><span class="line">    .removeClass(<span class="string">'serious'</span>)</span><br><span class="line">  ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-2-如果采取手动控制批处理的开始与结束"><a href="#6-2-如果采取手动控制批处理的开始与结束" class="headerlink" title="6.2 如果采取手动控制批处理的开始与结束"></a>6.2 如果采取手动控制批处理的开始与结束</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.startBatch();</span><br><span class="line"></span><br><span class="line">cy.$(<span class="string">'#j'</span>)</span><br><span class="line">  .data(<span class="string">'weight'</span>, <span class="string">'70'</span>)</span><br><span class="line">  .addClass(<span class="string">'funny'</span>)</span><br><span class="line">  .removeClass(<span class="string">'serious'</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">cy.endBatch();</span><br></pre></td></tr></table></figure><h2 id="7-元素的挂载与卸载"><a href="#7-元素的挂载与卸载" class="headerlink" title="7. 元素的挂载与卸载"></a>7. 元素的挂载与卸载</h2><p><code>cy.mount( container )</code> container参数为挂载的dom元素</p><p><code>cy.mount( container )</code> 移除container dom元素上挂载的cytoscape实例</p><h2 id="8-元素的销毁"><a href="#8-元素的销毁" class="headerlink" title="8. 元素的销毁"></a>8. 元素的销毁</h2><p>销毁<strong>cytoscape</strong>实例</p><p><code>cy.destroy()</code></p><p>可以使用cy.cy.destroy()来判断<strong>cytoscape</strong>实例是否已经被销毁</p><h1 id="三-数据绑定"><a href="#三-数据绑定" class="headerlink" title="三. 数据绑定"></a>三. 数据绑定</h1><h2 id="3-1-图数据绑定及获取"><a href="#3-1-图数据绑定及获取" class="headerlink" title="3.1 图数据绑定及获取"></a>3.1 图数据绑定及获取</h2><ul><li><p>cy.data() — 获取整个图的数据对象</p></li><li><p>cy.data( name ) — 获取指定字段名的数据</p></li><li><p>cy.data( name, value )   — 绑定键为name,值为value的数据</p></li><li><p>cy.data( obj ) — 通过对象更新途中的多个字段值数据</p></li></ul><h2 id="3-2-图数据删除"><a href="#3-2-图数据删除" class="headerlink" title="3.2 图数据删除"></a>3.2 图数据删除</h2><ul><li>cy.removeData() — 删除图的所有可变数据</li><li>cy.removeData(names) — 删除指定字段名的数据, names参数为要删除的字段的空格分隔列表</li></ul><h2 id="3-3-图数据暂存"><a href="#3-3-图数据暂存" class="headerlink" title="3.3 图数据暂存"></a>3.3 图数据暂存</h2><h3 id="3-3-1-cy-scratch"><a href="#3-3-1-cy-scratch" class="headerlink" title="3.3.1 cy.scratch()"></a>3.3.1 <code>cy.scratch()</code></h3><p>设置或获取暂存数据，其中可以存储临时数据或非json数据。应用程序级别的暂存数据应该使用带下划线前缀的名称空间，如’_foo’</p><ul><li><p>cy.scratch()  — 获取图所有名称空间下的暂存数据</p></li><li><p>cy.scratch( namespace ) — 获取指定名称空间下的暂存数据</p></li><li><p>cy.scratch( namespace, value )  — 添加名称空间namespace，并设置暂存值为value</p><h3 id="3-3-2-cy-removeScratch"><a href="#3-3-2-cy-removeScratch" class="headerlink" title="3.3.2 cy.removeScratch()"></a>3.3.2 cy.removeScratch()</h3></li></ul><p>移除图的暂存数据</p><p><code>cy.removeScratch( namespace )</code> 移除指定命名空间下的暂存数据, 不添加命名空间参数则会清空所有图相关的暂存数据</p><h1 id="四-事件监听"><a href="#四-事件监听" class="headerlink" title="四. 事件监听"></a>四. 事件监听</h1><h2 id="4-1-事件普通绑定方式cy-on"><a href="#4-1-事件普通绑定方式cy-on" class="headerlink" title="4.1 事件普通绑定方式cy.on()"></a>4.1 事件普通绑定方式cy.on()</h2><p>别名： cy.bind()<code>,</code>cy.listen()<code>,</code>cy.addListener()</p><p>事件的绑定方式如下:</p><p>cy.on( events [, selector], function(event) )</p><ul><li><p><a href="https://js.cytoscape.org/#events" target="_blank" rel="noopener">events</a></p><p><strong>空格分隔的时间名列表</strong></p></li><li><p><a href="https://js.cytoscape.org/#selectors" target="_blank" rel="noopener">selector</a></p><p>可选参数, 如果不传递，事件将被绑定在整个图实例上</p><p><strong>选择器，匹配到的元素将被绑定事件</strong></p></li><li><p>function(event)</p><p><strong>事件监听的回调函数</strong></p><ul><li><p><a href="https://js.cytoscape.org/#events" target="_blank" rel="noopener">event</a></p><p><strong>监听到的事件对象</strong></p></li></ul></li></ul><p>一个实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.on(<span class="string">'tap'</span>, <span class="string">'node'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = evt.target;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'tapped '</span> + node.id() );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下列代码没有指定选择器，则事件被绑定到了整个图实例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// target holds a reference to the originator</span></span><br><span class="line">  <span class="comment">// of the event (core or element)</span></span><br><span class="line">  <span class="keyword">var</span> evtTarget = event.target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( evtTarget === cy )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'tap on background'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'tap on some element'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-2-可以获取Promise对象的事件绑定方式cy-promiseOn"><a href="#4-2-可以获取Promise对象的事件绑定方式cy-promiseOn" class="headerlink" title="4.2 可以获取Promise对象的事件绑定方式cy.promiseOn()"></a>4.2 可以获取Promise对象的事件绑定方式cy.promiseOn()</h2><p>别名: pon</p><p>事件触发后将获取到一个成功态的的Promise对象<br><code>cy.promiseOn( events [, selector] )</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.pon(<span class="string">'tap'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"> event </span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tap promise fulfilled'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-3-只生效一次的事件监听cy-one"><a href="#4-3-只生效一次的事件监听cy-one" class="headerlink" title="4.3 只生效一次的事件监听cy.one()"></a>4.3 只生效一次的事件监听cy.one()</h3><p>绑定的事件只响应一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.one(<span class="string">'tap'</span>, <span class="string">'node'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tap!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cy.$(<span class="string">'node'</span>).eq(<span class="number">0</span>).trigger(<span class="string">'tap'</span>); <span class="comment">// 触发事件，事件不再响应</span></span><br><span class="line">cy.$(<span class="string">'node'</span>).eq(<span class="number">1</span>).trigger(<span class="string">'tap'</span>); <span class="comment">// 事件不再响应</span></span><br></pre></td></tr></table></figure><h2 id="4-4-事件监听的移除"><a href="#4-4-事件监听的移除" class="headerlink" title="4.4 事件监听的移除"></a>4.4 事件监听的移除</h2><h3 id="4-4-1-cy-removeListener"><a href="#4-4-1-cy-removeListener" class="headerlink" title="4.4.1 cy.removeListener()"></a>4.4.1 cy.removeListener()</h3><p>cy.removeListener( events [, selector] [, handler] )</p><ul><li><p><a href="https://js.cytoscape.org/#events" target="_blank" rel="noopener">events</a></p><p>空格分隔的事件名列表</p></li><li><p><a href="https://js.cytoscape.org/#selectors" target="_blank" rel="noopener">selector</a></p><p> 选择器，匹配到的元素将进行事件移除，可选参数，如果不指定，则移除对象为图实例 </p></li><li><p>handler<br>可选参数，可指定移除指定的处理器函数对象关联的事件，不指定则移除所有指定类型的事件处理器监听 </p></li></ul><p>如下：<br>实例1: 不指定具体的事件处理器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all tap listener handlers, including the one above</span></span><br><span class="line">cy.removeListener(<span class="string">'tap'</span>);</span><br></pre></td></tr></table></figure><p>实例2: 针对具体的事件处理器进行事件绑定和解绑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'called handler'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">cy.on(<span class="string">'tap'</span>, handler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'called other handler'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">cy.on(<span class="string">'tap'</span>, otherHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// just remove handler</span></span><br><span class="line">cy.removeListener(<span class="string">'tap'</span>, handler);</span><br></pre></td></tr></table></figure><h3 id="4-4-2-移除图实例所有事件监听"><a href="#4-4-2-移除图实例所有事件监听" class="headerlink" title="4.4.2 移除图实例所有事件监听"></a>4.4.2 移除图实例所有事件监听</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.removeAllListeners()</span><br></pre></td></tr></table></figure><h3 id="4-4-3-事件的主动触发"><a href="#4-4-3-事件的主动触发" class="headerlink" title="4.4.3 事件的主动触发"></a>4.4.3 事件的主动触发</h3><p>cy.emit()， 别名cy.trigger()</p><p><code>cy.emit( events [, extraParams] )</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt, f, b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tap'</span>, f, b);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cy.emit(<span class="string">'tap'</span>, [<span class="string">'foo'</span>, <span class="string">'bar'</span>]);</span><br></pre></td></tr></table></figure><h3 id="4-4-4-图准备就绪事件的监听"><a href="#4-4-4-图准备就绪事件的监听" class="headerlink" title="4.4.4 图准备就绪事件的监听"></a>4.4.4 图准备就绪事件的监听</h3><p><code>cy.ready()</code></p><p>一旦图形准备好(即初始数据加载和初始布局完成)，就运行一个回调。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.ready(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-视口操作"><a href="#五-视口操作" class="headerlink" title="五. 视口操作"></a>五. 视口操作</h1><h2 id="5-1-使用cy-container-获取图实例的dom容器"><a href="#5-1-使用cy-container-获取图实例的dom容器" class="headerlink" title="5.1 使用cy.container()获取图实例的dom容器"></a>5.1 使用cy.container()获取图实例的dom容器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.container()</span><br></pre></td></tr></table></figure><h2 id="5-2-居中操作cy-center"><a href="#5-2-居中操作cy-center" class="headerlink" title="5.2 居中操作cy.center()"></a>5.2 居中操作cy.center()</h2><ul><li>cy.center() — 以图中所有元素为中心进行居中。</li><li>cy.center( eles ) — 以指定元素为中心进行居中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = cy.$(<span class="string">'#j'</span>);</span><br><span class="line">cy.center( j );</span><br></pre></td></tr></table></figure><p>5.3 自适应</p><p>cy.fit() — 自动调整图的平移距离和缩放级别以达到正好容纳元素的效果</p><ul><li>cy.fit() — 调整视口以容纳图中的所有元素</li><li>cy.fit( [eles], [ padding]) — 调整视口以容纳指定元素，并可以指定padding</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.fit( cy.$(<span class="string">'#j, #e'</span>) );</span><br></pre></td></tr></table></figure><h2 id="5-3-重置图的默认缩放级别和平移位置"><a href="#5-3-重置图的默认缩放级别和平移位置" class="headerlink" title="5.3 重置图的默认缩放级别和平移位置"></a>5.3 重置图的默认缩放级别和平移位置</h2><p>cy.reset() </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cy.pan(&#123; <span class="attr">x</span>: <span class="number">50</span>, <span class="attr">y</span>: <span class="number">-100</span> &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cy.zoom( <span class="number">2</span> );</span><br><span class="line">&#125;, <span class="number">2000</span> );</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cy.reset();</span><br><span class="line">&#125;, <span class="number">3000</span> );</span><br></pre></td></tr></table></figure><h2 id="5-4-获取或设置图形的平移位置。"><a href="#5-4-获取或设置图形的平移位置。" class="headerlink" title="5.4 获取或设置图形的平移位置。"></a>5.4 获取或设置图形的平移位置。</h2><ul><li>cy.pan() — 获取当前平移位置</li><li>cy.pan( renderedPosition )  — eg: { x: 100, y: 200 }</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.pan(&#123;</span><br><span class="line">  x: <span class="number">100</span>,</span><br><span class="line">  y: <span class="number">100</span> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( cy.pan() );</span><br></pre></td></tr></table></figure><h2 id="5-5-对于当前位置相对地平移图形"><a href="#5-5-对于当前位置相对地平移图形" class="headerlink" title="5.5 对于当前位置相对地平移图形"></a>5.5 对于当前位置相对地平移图形</h2><p><code>cy.panBy( renderedPosition )</code></p><p>如将图形向右平移100像素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.panBy(&#123;</span><br><span class="line">  x: <span class="number">100</span>,</span><br><span class="line">  y: <span class="number">0</span> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-6-设置是否可以支持平移操作"><a href="#5-6-设置是否可以支持平移操作" class="headerlink" title="5.6 设置是否可以支持平移操作"></a>5.6 设置是否可以支持平移操作</h2><ul><li>cy.panningEnabled()  — 获取是否当前图实例支持进行平移操作</li><li>cy.panningEnabled( bool ) — 设置当前图实例是否支持进行平移操作</li><li>cy.userPanningEnabled()  —  获取是否启用了用户平移(用户的拖拽操作)。</li><li>cy.userPanningEnabled( bool ) — 设置是否启用用户平移</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.panningEnabled( bool )</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.userPanningEnabled( <span class="literal">true</span> );</span><br></pre></td></tr></table></figure><h2 id="5-7-指定缩放级别"><a href="#5-7-指定缩放级别" class="headerlink" title="5.7 指定缩放级别"></a>5.7 指定缩放级别</h2><h3 id="5-7-1-cy-zoom"><a href="#5-7-1-cy-zoom" class="headerlink" title="5.7.1 cy.zoom()"></a>5.7.1 cy.zoom()</h3><ul><li><p>cy.zoom() 获取缩放级别</p></li><li><p>cy.zoom( level )  设置缩放级别</p></li><li><p>cy.zoom( options )  <strong>options</strong> The options for zooming.</p><ul><li><p>level</p><p>缩放级别</p></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">position</a></p><p>要缩放的位置</p></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">renderedPosition</a></p><p>缩放到的位置</p><p>position和renderedPosition不要同时指定</p></li></ul></li></ul><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.zoom(&#123;</span><br><span class="line">  level: <span class="number">1.5</span>,</span><br><span class="line">  position: cy.getElementById(<span class="string">'a'</span>).position()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>cy.minZoom() —  获取最小缩放级别</p></li><li><p>cy.maxZoom() –  设置最小缩放级别</p></li><li><p>cy.viewport( zoom, pan ) — 通过一个函数来设置缩放级别和平移位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.viewport(&#123;</span><br><span class="line">  zoom: <span class="number">2</span>,</span><br><span class="line">  pan: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-7-2-cy-zoomingEnabled"><a href="#5-7-2-cy-zoomingEnabled" class="headerlink" title="5.7.2 cy.zoomingEnabled()"></a>5.7.2 cy.zoomingEnabled()</h3><ul><li><p>cy.zoomingEnabled() — 获取是否支持缩放</p></li><li><p>cy.zoomingEnabled(bool)  — 设置是否支持缩放</p></li><li><p>userZoomingEnabled() — 获取是否支持用户使用鼠标等交互方式进行缩放</p></li><li><p>userZoomingEnabled( bool ) — 设置是否支持用户使用鼠标等交互方式进行缩放</p></li></ul><h2 id="5-8-boxSelectionEnabled"><a href="#5-8-boxSelectionEnabled" class="headerlink" title="5.8 boxSelectionEnabled"></a>5.8 boxSelectionEnabled</h2><p>获取或设置是否启用了框选择。如果同时启用平移，用户必须按住shift、control、alt或command中的一个来启动框选择</p><ul><li>cy.boxSelectionEnabled() — 获取是否支持扩选</li><li>cy.boxSelectionEnabled( bool ) — 设置是否支持扩选</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.boxSelectionEnabled( <span class="literal">true</span> );</span><br></pre></td></tr></table></figure><h2 id="5-9-cy-selectionType"><a href="#5-9-cy-selectionType" class="headerlink" title="5.9 cy.selectionType()"></a>5.9 cy.selectionType()</h2><p>设置或设置选择类型。“single”选择类型是默认的，点击一个元素将选择该元素并取消选择前面的元素。</p><p>还可以指定为追加类型”additive”, 可逐次选中多个元素</p><ul><li>cy.selectionType()</li><li>cy.selectionType( type ) “single”(default)或者”additive”</li></ul><h2 id="5-10-获取视口宽度和高度"><a href="#5-10-获取视口宽度和高度" class="headerlink" title="5.10 获取视口宽度和高度"></a>5.10 获取视口宽度和高度</h2><ul><li>cy.width()</li><li>cy.height()</li><li>cy.extend()<br>获取viewport的范围，模型坐标中的一个边界框让您知道在viewport中哪些模型位置是可见的。</li></ul><p>![image-20200418201051078](/Users/liwei/Library/Application Support/typora-user-images/image-20200418201051078.png)</p><h1 id="5-11-cy-autolock"><a href="#5-11-cy-autolock" class="headerlink" title="5.11 cy.autolock()"></a>5.11 cy.autolock()</h1><p>获取或设置节点是否被自动锁定(即，如果为真，则无论节点的状态如何都被锁定)</p><ul><li>cy.autolock() — 获取图节点是否自动锁定</li><li>cy.autolock( bool ) — 设置图节点是否自动锁定</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.autolock( bool )</span><br></pre></td></tr></table></figure><h2 id="5-12-设置节点是否自动取消抓取autoungrabify"><a href="#5-12-设置节点是否自动取消抓取autoungrabify" class="headerlink" title="5.12 设置节点是否自动取消抓取autoungrabify"></a>5.12 设置节点是否自动取消抓取autoungrabify</h2><ul><li>cy.autoungrabify()  — 获取是否自动取消抓取被启用</li><li>cy.autoungrabify( bool ) —  设置是否启动自动取消抓取</li></ul><h2 id="5-13-获取或设置节点是否自动取消选择"><a href="#5-13-获取或设置节点是否自动取消选择" class="headerlink" title="5.13 获取或设置节点是否自动取消选择"></a>5.13 获取或设置节点是否自动取消选择</h2><ul><li>cy.autounselectify()</li><li>cy.autounselectify( bool )</li></ul><h2 id="5-14-强制渲染器重新计算视口边界"><a href="#5-14-强制渲染器重新计算视口边界" class="headerlink" title="5.14 强制渲染器重新计算视口边界"></a>5.14 强制渲染器重新计算视口边界</h2><p><code>cy.resize()</code></p><p>别名: <code>cy.invalidateDimensions()</code></p><h1 id="六-动画Animation"><a href="#六-动画Animation" class="headerlink" title="六. 动画Animation"></a>六. 动画Animation</h1><h2 id="6-1-动画执行cy-animate"><a href="#6-1-动画执行cy-animate" class="headerlink" title="6.1 动画执行cy.animate()"></a>6.1 动画执行cy.animate()</h2><ul><li><p>cy.animated()  判断是否有动画在进行</p></li><li><p>cy.animate( options ) 操纵视口执行动画<strong>options</strong> An object containing the details of the animation.</p><ul><li><p>zoom</p><p>一个缩放级别(数字)或一个缩放配置对象。</p></li><li><ul><li><p>level </p><p>要使用的缩放级别。</p></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">position</a> </p><p>缩放发生的位置。这将自动修改pan，使指定的模型位置在缩放期间保持在viewport区段中的相同位置。</p></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">renderedPosition</a></p><p>关于缩放发生的渲染位置，作为使用模型位置的替代。这将自动修改pan，使模型位置(与动画开始时呈现的位置相对应)在缩放期间保持在viewport区段中的相同位置。</p></li></ul></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">pan</a></p><p>图形将被移动到的平移位置。</p></li><li><p><a href="https://js.cytoscape.org/#notation/position" target="_blank" rel="noopener">panBy</a></p><p>图形将被移动到的相对平移位置。</p></li><li><p>fit<br>  一个包含图自动调整以适应对应元素的参数对象</p></li><li><ul><li><p><a href="https://js.cytoscape.org/#collection" target="_blank" rel="noopener">eles</a></p><p>视口将进行调整以容纳对应元素</p></li><li><p>padding</p><p>Padding to use with the fitting (default <code>0</code>).</p></li></ul></li><li><p>center</p><p>一个对象，该对象包含将从其中对图形进行动画处理的居中选项。</p></li><li><ul><li><p><a href="https://js.cytoscape.org/#collection" target="_blank" rel="noopener">eles</a></p><p>将视口置于中心的elements或选择器</p></li></ul></li><li><p>duration</p><p>动画执行时间</p></li><li><p>queue</p><p>一个布尔值，指示是否对动画进行排队(默认为“true”)。核心上排队的动画按顺序运行，直到队列为空。</p></li><li><p><a href="https://js.cytoscape.org/#style/transition-animation" target="_blank" rel="noopener">easing</a></p><p>指定<a href="https://js.cytoscape.org/#style/transition-animation" target="_blank" rel="noopener"> transition- time- function </a>类型，以形成动画的进度曲线。</p></li><li><p>complete<br>动画执行完成时候执行的回调函数</p></li><li><p>step</p><p>动画步骤调用回调。</p></li></ul><p>eg:</p><ol><li>操纵pan和zoom</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.animate(&#123;</span><br><span class="line">  pan: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  zoom: <span class="number">2</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  duration: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>视口自适应容纳元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.animate(&#123;</span><br><span class="line">  fit: &#123;</span><br><span class="line">    eles: j,</span><br><span class="line">    padding: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  duration: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-2-动画获取cy-animation"><a href="#6-2-动画获取cy-animation" class="headerlink" title="6.2 动画获取cy.animation()"></a>6.2 动画获取cy.animation()</h2><p>获取视口的动画。</p><p><code>cy.animation( options )</code></p><p>options参数同上, 该函数用来获取指定配置信息的动画</p><h2 id="6-3-为动画添加延迟cy-delay"><a href="#6-3-为动画添加延迟cy-delay" class="headerlink" title="6.3 为动画添加延迟cy.delay()"></a>6.3 为动画添加延迟cy.delay()</h2><p><code>cy.delay( duration, complete )</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  .animate(&#123;</span><br><span class="line">    fit: &#123; <span class="attr">eles</span>: <span class="string">'#j'</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .delay(<span class="number">1000</span>)   <span class="comment">// 1s</span></span><br><span class="line"></span><br><span class="line">  .animate(&#123;</span><br><span class="line">    fit: &#123; <span class="attr">eles</span>: <span class="string">'#e'</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="6-4-获取视口的延迟动画cy-delayAnimation"><a href="#6-4-获取视口的延迟动画cy-delayAnimation" class="headerlink" title="6.4 获取视口的延迟动画cy.delayAnimation()"></a>6.4 获取视口的延迟动画cy.delayAnimation()</h2><p><code>cy.delayAnimation( duration )</code> — duration为延迟时间</p><h2 id="6-5-停止动画"><a href="#6-5-停止动画" class="headerlink" title="6.5 停止动画"></a>6.5 停止动画</h2><p><code>stop(clearQueue, jumpToEnd)</code><br>clearQueue是一个布尔值(默认为false)，表示动画队列是否应该被清空。<br>jumpToEnd一个布尔值(默认为false)，指示当前运行的动画是否应该跳转到它们的末端，而不是中途停止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.animate(&#123;</span><br><span class="line">  fit: &#123; <span class="attr">eles</span>: <span class="string">'#j'</span> &#125;</span><br><span class="line">&#125;, &#123; <span class="attr">duration</span>: <span class="number">2000</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stop in the middle</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cy.stop();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="6-6-清空动画队列cy-clearQueue"><a href="#6-6-清空动画队列cy-clearQueue" class="headerlink" title="6.6 清空动画队列cy.clearQueue()"></a>6.6 清空动画队列cy.clearQueue()</h2><p>删除viewport中所有排队的动画。</p><h1 id="七-布局-Layout"><a href="#七-布局-Layout" class="headerlink" title="七.布局 Layout"></a>七.布局 Layout</h1><p><code>cy.layout()</code></p><p>别名: <code>cy.createLayout()</code>, <code>cy.makeLayout()</code></p><p>获取一个新的布局，它可以用于用算法在图中定位节点。</p><p>cy.layout( options )</p><ul><li>options  布局参数, options.name必须指定</li></ul><p>cy.layout()会返回一个布局实例，可以基于这个实例进行其他操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> layout = cy.layout(&#123;</span><br><span class="line">  name: <span class="string">'random'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">layout.run();</span><br></pre></td></tr></table></figure><h1 id="八-样式Style"><a href="#八-样式Style" class="headerlink" title="八. 样式Style"></a>八. 样式Style</h1><p><code>cy.style()</code></p><ul><li>cy.style() — 获取当前图的样式对象</li><li>cy.style( stylesheet ) — 为图指定新的样式对象<br><strong><a href="https://js.cytoscape.org/#style" target="_blank" rel="noopener">stylesheet</a></strong> 参数可以是一个 <code>cytoscape.stylesheet()</code> 对象, 一个样式对象的字符串, 也可以指定为JSON格式的字符串(格式参考[options.style`](<a href="https://js.cytoscape.org/#style" target="_blank" rel="noopener">https://js.cytoscape.org/#style</a>))</li></ul><h2 id="8-1-样式字符串"><a href="#8-1-样式字符串" class="headerlink" title="8.1 样式字符串"></a>8.1 样式字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cytoscape(&#123;</span><br><span class="line">  container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  style: <span class="string">'node &#123; background-color: green; &#125;'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// , ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-2-普通JSON格式"><a href="#8-2-普通JSON格式" class="headerlink" title="8.2 普通JSON格式"></a>8.2 普通JSON格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cytoscape(&#123;</span><br><span class="line">  container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  style: [</span><br><span class="line">    &#123;</span><br><span class="line">      selector: <span class="string">'node'</span>,</span><br><span class="line">      style: &#123;</span><br><span class="line">        <span class="string">'background-color'</span>: <span class="string">'red'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// , ...</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// , ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-3-cytoscape-stylesheet-用法"><a href="#8-3-cytoscape-stylesheet-用法" class="headerlink" title="8.3 cytoscape.stylesheet()`用法"></a>8.3 cytoscape.stylesheet()`用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cytoscape(&#123;</span><br><span class="line">  container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  style: cytoscape.stylesheet()</span><br><span class="line">    .selector(<span class="string">'node'</span>)</span><br><span class="line">      .style(&#123;</span><br><span class="line">        <span class="string">'background-color'</span>: <span class="string">'blue'</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// , ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-4-根据元素data进行样式绘制"><a href="#8-4-根据元素data进行样式绘制" class="headerlink" title="8.4 根据元素data进行样式绘制"></a>8.4 根据元素data进行样式绘制</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cytoscape(&#123;</span><br><span class="line">  container: <span class="built_in">document</span>.getElementById(<span class="string">'cy'</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  style: cytoscape.stylesheet()</span><br><span class="line">    .selector(<span class="string">'node'</span>)</span><br><span class="line">      .style(&#123;</span><br><span class="line">        <span class="string">'background-color'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> ele </span>)</span>&#123; <span class="keyword">return</span> ele.data(<span class="string">'bg'</span>) &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// which works the same as</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 'background-color': 'data(bg)'</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// , ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-5-设置一个全新的样式"><a href="#8-5-设置一个全新的样式" class="headerlink" title="8.5 设置一个全新的样式"></a>8.5 设置一个全新的样式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cy.style()</span><br><span class="line">  .clear() <span class="comment">//清除默认样式而应用一个全新的样式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义节点样式</span></span><br><span class="line">  .selector(<span class="string">'node'</span>)</span><br><span class="line">    .style(<span class="string">'background-color'</span>, <span class="string">'magenta'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义边样式</span></span><br><span class="line">  .selector(<span class="string">'edge'</span>)</span><br><span class="line">      .style(&#123;</span><br><span class="line">      <span class="string">'width'</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">'line-color'</span>: <span class="string">'yellow'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  .update() <span class="comment">// 显示声明样式更新代码的结束，通知cytoscape更新元素样式</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="8-6-从样式字符串创建style"><a href="#8-6-从样式字符串创建style" class="headerlink" title="8.6 从样式字符串创建style"></a>8.6 从样式字符串创建style</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.style()</span><br><span class="line">  .fromString(<span class="string">'node &#123; background-color: blue; &#125;'</span>)</span><br><span class="line"></span><br><span class="line">  .update() <span class="comment">// update the elements in the graph with the new style</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="8-7-获取当前样式的JSON对象"><a href="#8-7-获取当前样式的JSON对象" class="headerlink" title="8.7 获取当前样式的JSON对象"></a>8.7 获取当前样式的JSON对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> styleJson = cy.style().json();</span><br><span class="line"><span class="keyword">var</span> serializedJson = <span class="built_in">JSON</span>.stringify( styleJson );</span><br></pre></td></tr></table></figure><h1 id="九-图的导出"><a href="#九-图的导出" class="headerlink" title="九. 图的导出"></a>九. 图的导出</h1><h2 id="9-1-将当前图形视图导出为PNG图像"><a href="#9-1-将当前图形视图导出为PNG图像" class="headerlink" title="9.1 将当前图形视图导出为PNG图像"></a>9.1 将当前图形视图导出为PNG图像</h2><p>cy.png( options )</p><ul><li><p>options</p><p>导出参数设置</p><ul><li><p>output</p><p>输出应该是“base64uri”(默认)、“base64”、“blob”还是“blob-promise”(返回解析为blob的Promise)。</p></li><li><p>bg</p><p>图像的背景颜色(默认为白色)。</p></li><li><p>full</p><p>是导出当前的viewport视图(“false”，默认)还是导出整个图(“true”)。</p></li><li><p>scale </p><p>此值指定一个正数，该正数缩放生成的图像的大小。</p></li><li><p>maxWidth</p><p> 指定与“maxHeight”组合的自动比例，以便生成的图像宽度不超过“maxWidth”。</p></li><li><p>maxHeight</p><p> 指定与“maxWidth”组合的自动比例，以便生成的图像不高于“maxHeight”。</p></li></ul></li></ul><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> png64 = cy.png();</span><br><span class="line"></span><br><span class="line"><span class="comment">// put the png data in an img tag</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#png-eg'</span>).setAttribute(<span class="string">'src'</span>, png64);</span><br></pre></td></tr></table></figure><h2 id="9-2-导出图为jpg"><a href="#9-2-导出图为jpg" class="headerlink" title="9.2 导出图为jpg"></a>9.2 导出图为jpg</h2><p><code>cy.jpg()</code></p><p>cy.jpg( options )</p><ul><li><p>options</p><p>导出参数对象</p><ul><li><p>output</p><p>输出应该是“base64uri”(默认)、“base64”、“blob”还是“blob-promise”(返回解析为blob的Promise)。</p></li><li><p>bg</p><p>图像的背景颜色(默认为白色)。</p></li><li><p>full</p><p>是导出当前的viewport视图(“false”，默认)还是导出整个图(“true”)。</p></li><li><p>scale</p><p>此值指定一个正数，该正数缩放生成的图像的大小。</p></li><li><p>maxWidth</p><p>指定与“maxHeight”组合的自动比例，以便生成的图像宽度不超过“maxWidth”。</p></li><li><p>maxHeight</p><p>指定与“maxWidth”组合的自动比例，以便生成的图像不高于“maxHeight”。</p></li><li><p>quality</p><p>指定从’ 0 ‘(低质量，低文件大小)到’ 1 ‘(高质量，高文件大小)的图像质量。如果没有设置，则使用浏览器的默认质量值。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jpg64 = cy.jpg();</span><br><span class="line"></span><br><span class="line"><span class="comment">// put the png data in an img tag</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#jpg-eg'</span>).setAttribute(<span class="string">'src'</span>, jpg64);</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-3-导出JSON"><a href="#9-3-导出JSON" class="headerlink" title="9.3 导出JSON"></a>9.3 导出JSON</h2><p><code>cy.json()</code></p><p>以初始化时使用的相同JSON格式导入或导出图数据。</p><p>cy.json( flatEles )</p><ul><li><p>flatEles</p><p>resulant JSON是否应该将元素包含为平面数组(‘ true ‘)或两个按组键控的数组(‘ false ‘，默认)。</p></li></ul><p>cy.json( cyJson )</p><p>将图形作为JSON导入，只更新指定的字段。</p><ul><li><p><a href="https://js.cytoscape.org/#core/initialisation" target="_blank" rel="noopener">cyJson</a></p><p>具有与应该更改的状态对应的字段的对象。</p></li></ul><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.json(&#123;</span><br><span class="line">  zoom: <span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5知识点总结</title>
      <link href="/2020/05/12/2020-2020-05-12-HTML5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/12/2020-2020-05-12-HTML5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/HTML5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.png" alt="HTML5知识点总结.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签整理</title>
      <link href="/2020/05/12/2020-2020-05-12-HTML%E6%A0%87%E7%AD%BE%E6%95%B4%E7%90%86/"/>
      <url>/2020/05/12/2020-2020-05-12-HTML%E6%A0%87%E7%AD%BE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/HTML%E6%A0%87%E7%AD%BE%E6%95%B4%E7%90%86.png" alt="HTML标签整理.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
